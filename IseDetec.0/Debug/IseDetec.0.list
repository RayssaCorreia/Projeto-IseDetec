
IseDetec.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df0  08003df0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003df0  08003df0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003df0  08003df0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003df0  08003df0  00013df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003df4  08003df4  00013df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000010  08003e08  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08003e08  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009490  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6d  00000000  00000000  000294c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002b038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002b8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af21  00000000  00000000  0002c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099e7  00000000  00000000  00047001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afd2a  00000000  00000000  000509e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100712  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e58  00000000  00000000  00100768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003d58 	.word	0x08003d58

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08003d58 	.word	0x08003d58

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_dmul>:
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	4657      	mov	r7, sl
 8000220:	464e      	mov	r6, r9
 8000222:	4645      	mov	r5, r8
 8000224:	46de      	mov	lr, fp
 8000226:	b5e0      	push	{r5, r6, r7, lr}
 8000228:	4698      	mov	r8, r3
 800022a:	030c      	lsls	r4, r1, #12
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	0006      	movs	r6, r0
 8000230:	4692      	mov	sl, r2
 8000232:	b087      	sub	sp, #28
 8000234:	0b24      	lsrs	r4, r4, #12
 8000236:	0d5b      	lsrs	r3, r3, #21
 8000238:	0fcf      	lsrs	r7, r1, #31
 800023a:	2b00      	cmp	r3, #0
 800023c:	d06c      	beq.n	8000318 <__aeabi_dmul+0xfc>
 800023e:	4add      	ldr	r2, [pc, #884]	; (80005b4 <__aeabi_dmul+0x398>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d100      	bne.n	8000246 <__aeabi_dmul+0x2a>
 8000244:	e086      	b.n	8000354 <__aeabi_dmul+0x138>
 8000246:	0f42      	lsrs	r2, r0, #29
 8000248:	00e4      	lsls	r4, r4, #3
 800024a:	4314      	orrs	r4, r2
 800024c:	2280      	movs	r2, #128	; 0x80
 800024e:	0412      	lsls	r2, r2, #16
 8000250:	4314      	orrs	r4, r2
 8000252:	4ad9      	ldr	r2, [pc, #868]	; (80005b8 <__aeabi_dmul+0x39c>)
 8000254:	00c5      	lsls	r5, r0, #3
 8000256:	4694      	mov	ip, r2
 8000258:	4463      	add	r3, ip
 800025a:	9300      	str	r3, [sp, #0]
 800025c:	2300      	movs	r3, #0
 800025e:	4699      	mov	r9, r3
 8000260:	469b      	mov	fp, r3
 8000262:	4643      	mov	r3, r8
 8000264:	4642      	mov	r2, r8
 8000266:	031e      	lsls	r6, r3, #12
 8000268:	0fd2      	lsrs	r2, r2, #31
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	4650      	mov	r0, sl
 800026e:	4690      	mov	r8, r2
 8000270:	0b36      	lsrs	r6, r6, #12
 8000272:	0d5b      	lsrs	r3, r3, #21
 8000274:	d100      	bne.n	8000278 <__aeabi_dmul+0x5c>
 8000276:	e078      	b.n	800036a <__aeabi_dmul+0x14e>
 8000278:	4ace      	ldr	r2, [pc, #824]	; (80005b4 <__aeabi_dmul+0x398>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d01d      	beq.n	80002ba <__aeabi_dmul+0x9e>
 800027e:	49ce      	ldr	r1, [pc, #824]	; (80005b8 <__aeabi_dmul+0x39c>)
 8000280:	0f42      	lsrs	r2, r0, #29
 8000282:	468c      	mov	ip, r1
 8000284:	9900      	ldr	r1, [sp, #0]
 8000286:	4463      	add	r3, ip
 8000288:	00f6      	lsls	r6, r6, #3
 800028a:	468c      	mov	ip, r1
 800028c:	4316      	orrs	r6, r2
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	449c      	add	ip, r3
 8000292:	0412      	lsls	r2, r2, #16
 8000294:	4663      	mov	r3, ip
 8000296:	4316      	orrs	r6, r2
 8000298:	00c2      	lsls	r2, r0, #3
 800029a:	2000      	movs	r0, #0
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	9900      	ldr	r1, [sp, #0]
 80002a0:	4643      	mov	r3, r8
 80002a2:	3101      	adds	r1, #1
 80002a4:	468c      	mov	ip, r1
 80002a6:	4649      	mov	r1, r9
 80002a8:	407b      	eors	r3, r7
 80002aa:	9301      	str	r3, [sp, #4]
 80002ac:	290f      	cmp	r1, #15
 80002ae:	d900      	bls.n	80002b2 <__aeabi_dmul+0x96>
 80002b0:	e07e      	b.n	80003b0 <__aeabi_dmul+0x194>
 80002b2:	4bc2      	ldr	r3, [pc, #776]	; (80005bc <__aeabi_dmul+0x3a0>)
 80002b4:	0089      	lsls	r1, r1, #2
 80002b6:	5859      	ldr	r1, [r3, r1]
 80002b8:	468f      	mov	pc, r1
 80002ba:	4652      	mov	r2, sl
 80002bc:	9b00      	ldr	r3, [sp, #0]
 80002be:	4332      	orrs	r2, r6
 80002c0:	d000      	beq.n	80002c4 <__aeabi_dmul+0xa8>
 80002c2:	e156      	b.n	8000572 <__aeabi_dmul+0x356>
 80002c4:	49bb      	ldr	r1, [pc, #748]	; (80005b4 <__aeabi_dmul+0x398>)
 80002c6:	2600      	movs	r6, #0
 80002c8:	468c      	mov	ip, r1
 80002ca:	4463      	add	r3, ip
 80002cc:	4649      	mov	r1, r9
 80002ce:	9300      	str	r3, [sp, #0]
 80002d0:	2302      	movs	r3, #2
 80002d2:	4319      	orrs	r1, r3
 80002d4:	4689      	mov	r9, r1
 80002d6:	2002      	movs	r0, #2
 80002d8:	e7e1      	b.n	800029e <__aeabi_dmul+0x82>
 80002da:	4643      	mov	r3, r8
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	0034      	movs	r4, r6
 80002e0:	0015      	movs	r5, r2
 80002e2:	4683      	mov	fp, r0
 80002e4:	465b      	mov	r3, fp
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	d05e      	beq.n	80003a8 <__aeabi_dmul+0x18c>
 80002ea:	2b03      	cmp	r3, #3
 80002ec:	d100      	bne.n	80002f0 <__aeabi_dmul+0xd4>
 80002ee:	e1f3      	b.n	80006d8 <__aeabi_dmul+0x4bc>
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d000      	beq.n	80002f6 <__aeabi_dmul+0xda>
 80002f4:	e118      	b.n	8000528 <__aeabi_dmul+0x30c>
 80002f6:	2200      	movs	r2, #0
 80002f8:	2400      	movs	r4, #0
 80002fa:	2500      	movs	r5, #0
 80002fc:	9b01      	ldr	r3, [sp, #4]
 80002fe:	0512      	lsls	r2, r2, #20
 8000300:	4322      	orrs	r2, r4
 8000302:	07db      	lsls	r3, r3, #31
 8000304:	431a      	orrs	r2, r3
 8000306:	0028      	movs	r0, r5
 8000308:	0011      	movs	r1, r2
 800030a:	b007      	add	sp, #28
 800030c:	bcf0      	pop	{r4, r5, r6, r7}
 800030e:	46bb      	mov	fp, r7
 8000310:	46b2      	mov	sl, r6
 8000312:	46a9      	mov	r9, r5
 8000314:	46a0      	mov	r8, r4
 8000316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000318:	0025      	movs	r5, r4
 800031a:	4305      	orrs	r5, r0
 800031c:	d100      	bne.n	8000320 <__aeabi_dmul+0x104>
 800031e:	e141      	b.n	80005a4 <__aeabi_dmul+0x388>
 8000320:	2c00      	cmp	r4, #0
 8000322:	d100      	bne.n	8000326 <__aeabi_dmul+0x10a>
 8000324:	e1ad      	b.n	8000682 <__aeabi_dmul+0x466>
 8000326:	0020      	movs	r0, r4
 8000328:	f000 fa92 	bl	8000850 <__clzsi2>
 800032c:	0001      	movs	r1, r0
 800032e:	0002      	movs	r2, r0
 8000330:	390b      	subs	r1, #11
 8000332:	231d      	movs	r3, #29
 8000334:	0010      	movs	r0, r2
 8000336:	1a5b      	subs	r3, r3, r1
 8000338:	0031      	movs	r1, r6
 800033a:	0035      	movs	r5, r6
 800033c:	3808      	subs	r0, #8
 800033e:	4084      	lsls	r4, r0
 8000340:	40d9      	lsrs	r1, r3
 8000342:	4085      	lsls	r5, r0
 8000344:	430c      	orrs	r4, r1
 8000346:	489e      	ldr	r0, [pc, #632]	; (80005c0 <__aeabi_dmul+0x3a4>)
 8000348:	1a83      	subs	r3, r0, r2
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2300      	movs	r3, #0
 800034e:	4699      	mov	r9, r3
 8000350:	469b      	mov	fp, r3
 8000352:	e786      	b.n	8000262 <__aeabi_dmul+0x46>
 8000354:	0005      	movs	r5, r0
 8000356:	4325      	orrs	r5, r4
 8000358:	d000      	beq.n	800035c <__aeabi_dmul+0x140>
 800035a:	e11c      	b.n	8000596 <__aeabi_dmul+0x37a>
 800035c:	2208      	movs	r2, #8
 800035e:	9300      	str	r3, [sp, #0]
 8000360:	2302      	movs	r3, #2
 8000362:	2400      	movs	r4, #0
 8000364:	4691      	mov	r9, r2
 8000366:	469b      	mov	fp, r3
 8000368:	e77b      	b.n	8000262 <__aeabi_dmul+0x46>
 800036a:	4652      	mov	r2, sl
 800036c:	4332      	orrs	r2, r6
 800036e:	d100      	bne.n	8000372 <__aeabi_dmul+0x156>
 8000370:	e10a      	b.n	8000588 <__aeabi_dmul+0x36c>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d100      	bne.n	8000378 <__aeabi_dmul+0x15c>
 8000376:	e176      	b.n	8000666 <__aeabi_dmul+0x44a>
 8000378:	0030      	movs	r0, r6
 800037a:	f000 fa69 	bl	8000850 <__clzsi2>
 800037e:	0002      	movs	r2, r0
 8000380:	3a0b      	subs	r2, #11
 8000382:	231d      	movs	r3, #29
 8000384:	0001      	movs	r1, r0
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	3908      	subs	r1, #8
 800038c:	40da      	lsrs	r2, r3
 800038e:	408e      	lsls	r6, r1
 8000390:	4316      	orrs	r6, r2
 8000392:	4652      	mov	r2, sl
 8000394:	408a      	lsls	r2, r1
 8000396:	9b00      	ldr	r3, [sp, #0]
 8000398:	4989      	ldr	r1, [pc, #548]	; (80005c0 <__aeabi_dmul+0x3a4>)
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	0003      	movs	r3, r0
 800039e:	468c      	mov	ip, r1
 80003a0:	4463      	add	r3, ip
 80003a2:	2000      	movs	r0, #0
 80003a4:	9300      	str	r3, [sp, #0]
 80003a6:	e77a      	b.n	800029e <__aeabi_dmul+0x82>
 80003a8:	2400      	movs	r4, #0
 80003aa:	2500      	movs	r5, #0
 80003ac:	4a81      	ldr	r2, [pc, #516]	; (80005b4 <__aeabi_dmul+0x398>)
 80003ae:	e7a5      	b.n	80002fc <__aeabi_dmul+0xe0>
 80003b0:	0c2f      	lsrs	r7, r5, #16
 80003b2:	042d      	lsls	r5, r5, #16
 80003b4:	0c2d      	lsrs	r5, r5, #16
 80003b6:	002b      	movs	r3, r5
 80003b8:	0c11      	lsrs	r1, r2, #16
 80003ba:	0412      	lsls	r2, r2, #16
 80003bc:	0c12      	lsrs	r2, r2, #16
 80003be:	4353      	muls	r3, r2
 80003c0:	4698      	mov	r8, r3
 80003c2:	0013      	movs	r3, r2
 80003c4:	0028      	movs	r0, r5
 80003c6:	437b      	muls	r3, r7
 80003c8:	4699      	mov	r9, r3
 80003ca:	4348      	muls	r0, r1
 80003cc:	4448      	add	r0, r9
 80003ce:	4683      	mov	fp, r0
 80003d0:	4640      	mov	r0, r8
 80003d2:	000b      	movs	r3, r1
 80003d4:	0c00      	lsrs	r0, r0, #16
 80003d6:	4682      	mov	sl, r0
 80003d8:	4658      	mov	r0, fp
 80003da:	437b      	muls	r3, r7
 80003dc:	4450      	add	r0, sl
 80003de:	9302      	str	r3, [sp, #8]
 80003e0:	4581      	cmp	r9, r0
 80003e2:	d906      	bls.n	80003f2 <__aeabi_dmul+0x1d6>
 80003e4:	469a      	mov	sl, r3
 80003e6:	2380      	movs	r3, #128	; 0x80
 80003e8:	025b      	lsls	r3, r3, #9
 80003ea:	4699      	mov	r9, r3
 80003ec:	44ca      	add	sl, r9
 80003ee:	4653      	mov	r3, sl
 80003f0:	9302      	str	r3, [sp, #8]
 80003f2:	0c03      	lsrs	r3, r0, #16
 80003f4:	469b      	mov	fp, r3
 80003f6:	4643      	mov	r3, r8
 80003f8:	041b      	lsls	r3, r3, #16
 80003fa:	0400      	lsls	r0, r0, #16
 80003fc:	0c1b      	lsrs	r3, r3, #16
 80003fe:	4698      	mov	r8, r3
 8000400:	0003      	movs	r3, r0
 8000402:	4443      	add	r3, r8
 8000404:	9304      	str	r3, [sp, #16]
 8000406:	0c33      	lsrs	r3, r6, #16
 8000408:	4699      	mov	r9, r3
 800040a:	002b      	movs	r3, r5
 800040c:	0436      	lsls	r6, r6, #16
 800040e:	0c36      	lsrs	r6, r6, #16
 8000410:	4373      	muls	r3, r6
 8000412:	4698      	mov	r8, r3
 8000414:	0033      	movs	r3, r6
 8000416:	437b      	muls	r3, r7
 8000418:	469a      	mov	sl, r3
 800041a:	464b      	mov	r3, r9
 800041c:	435d      	muls	r5, r3
 800041e:	435f      	muls	r7, r3
 8000420:	4643      	mov	r3, r8
 8000422:	4455      	add	r5, sl
 8000424:	0c18      	lsrs	r0, r3, #16
 8000426:	1940      	adds	r0, r0, r5
 8000428:	4582      	cmp	sl, r0
 800042a:	d903      	bls.n	8000434 <__aeabi_dmul+0x218>
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	025b      	lsls	r3, r3, #9
 8000430:	469a      	mov	sl, r3
 8000432:	4457      	add	r7, sl
 8000434:	0c05      	lsrs	r5, r0, #16
 8000436:	19eb      	adds	r3, r5, r7
 8000438:	9305      	str	r3, [sp, #20]
 800043a:	4643      	mov	r3, r8
 800043c:	041d      	lsls	r5, r3, #16
 800043e:	0c2d      	lsrs	r5, r5, #16
 8000440:	0400      	lsls	r0, r0, #16
 8000442:	1940      	adds	r0, r0, r5
 8000444:	0c25      	lsrs	r5, r4, #16
 8000446:	0424      	lsls	r4, r4, #16
 8000448:	0c24      	lsrs	r4, r4, #16
 800044a:	0027      	movs	r7, r4
 800044c:	4357      	muls	r7, r2
 800044e:	436a      	muls	r2, r5
 8000450:	4690      	mov	r8, r2
 8000452:	002a      	movs	r2, r5
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	469a      	mov	sl, r3
 8000458:	434a      	muls	r2, r1
 800045a:	4361      	muls	r1, r4
 800045c:	4441      	add	r1, r8
 800045e:	4451      	add	r1, sl
 8000460:	4483      	add	fp, r0
 8000462:	4588      	cmp	r8, r1
 8000464:	d903      	bls.n	800046e <__aeabi_dmul+0x252>
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	025b      	lsls	r3, r3, #9
 800046a:	4698      	mov	r8, r3
 800046c:	4442      	add	r2, r8
 800046e:	043f      	lsls	r7, r7, #16
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	0c3f      	lsrs	r7, r7, #16
 8000474:	0409      	lsls	r1, r1, #16
 8000476:	19c9      	adds	r1, r1, r7
 8000478:	0027      	movs	r7, r4
 800047a:	4698      	mov	r8, r3
 800047c:	464b      	mov	r3, r9
 800047e:	4377      	muls	r7, r6
 8000480:	435c      	muls	r4, r3
 8000482:	436e      	muls	r6, r5
 8000484:	435d      	muls	r5, r3
 8000486:	0c3b      	lsrs	r3, r7, #16
 8000488:	4699      	mov	r9, r3
 800048a:	19a4      	adds	r4, r4, r6
 800048c:	444c      	add	r4, r9
 800048e:	4442      	add	r2, r8
 8000490:	9503      	str	r5, [sp, #12]
 8000492:	42a6      	cmp	r6, r4
 8000494:	d904      	bls.n	80004a0 <__aeabi_dmul+0x284>
 8000496:	2380      	movs	r3, #128	; 0x80
 8000498:	025b      	lsls	r3, r3, #9
 800049a:	4698      	mov	r8, r3
 800049c:	4445      	add	r5, r8
 800049e:	9503      	str	r5, [sp, #12]
 80004a0:	9b02      	ldr	r3, [sp, #8]
 80004a2:	043f      	lsls	r7, r7, #16
 80004a4:	445b      	add	r3, fp
 80004a6:	001e      	movs	r6, r3
 80004a8:	4283      	cmp	r3, r0
 80004aa:	4180      	sbcs	r0, r0
 80004ac:	0423      	lsls	r3, r4, #16
 80004ae:	4698      	mov	r8, r3
 80004b0:	9b05      	ldr	r3, [sp, #20]
 80004b2:	0c3f      	lsrs	r7, r7, #16
 80004b4:	4447      	add	r7, r8
 80004b6:	4698      	mov	r8, r3
 80004b8:	1876      	adds	r6, r6, r1
 80004ba:	428e      	cmp	r6, r1
 80004bc:	4189      	sbcs	r1, r1
 80004be:	4447      	add	r7, r8
 80004c0:	4240      	negs	r0, r0
 80004c2:	183d      	adds	r5, r7, r0
 80004c4:	46a8      	mov	r8, r5
 80004c6:	4693      	mov	fp, r2
 80004c8:	4249      	negs	r1, r1
 80004ca:	468a      	mov	sl, r1
 80004cc:	44c3      	add	fp, r8
 80004ce:	429f      	cmp	r7, r3
 80004d0:	41bf      	sbcs	r7, r7
 80004d2:	4580      	cmp	r8, r0
 80004d4:	4180      	sbcs	r0, r0
 80004d6:	9b03      	ldr	r3, [sp, #12]
 80004d8:	44da      	add	sl, fp
 80004da:	4698      	mov	r8, r3
 80004dc:	4653      	mov	r3, sl
 80004de:	4240      	negs	r0, r0
 80004e0:	427f      	negs	r7, r7
 80004e2:	4307      	orrs	r7, r0
 80004e4:	0c24      	lsrs	r4, r4, #16
 80004e6:	4593      	cmp	fp, r2
 80004e8:	4192      	sbcs	r2, r2
 80004ea:	458a      	cmp	sl, r1
 80004ec:	4189      	sbcs	r1, r1
 80004ee:	193f      	adds	r7, r7, r4
 80004f0:	0ddc      	lsrs	r4, r3, #23
 80004f2:	9b04      	ldr	r3, [sp, #16]
 80004f4:	0275      	lsls	r5, r6, #9
 80004f6:	431d      	orrs	r5, r3
 80004f8:	1e68      	subs	r0, r5, #1
 80004fa:	4185      	sbcs	r5, r0
 80004fc:	4653      	mov	r3, sl
 80004fe:	4252      	negs	r2, r2
 8000500:	4249      	negs	r1, r1
 8000502:	430a      	orrs	r2, r1
 8000504:	18bf      	adds	r7, r7, r2
 8000506:	4447      	add	r7, r8
 8000508:	0df6      	lsrs	r6, r6, #23
 800050a:	027f      	lsls	r7, r7, #9
 800050c:	4335      	orrs	r5, r6
 800050e:	025a      	lsls	r2, r3, #9
 8000510:	433c      	orrs	r4, r7
 8000512:	4315      	orrs	r5, r2
 8000514:	01fb      	lsls	r3, r7, #7
 8000516:	d400      	bmi.n	800051a <__aeabi_dmul+0x2fe>
 8000518:	e0c1      	b.n	800069e <__aeabi_dmul+0x482>
 800051a:	2101      	movs	r1, #1
 800051c:	086a      	lsrs	r2, r5, #1
 800051e:	400d      	ands	r5, r1
 8000520:	4315      	orrs	r5, r2
 8000522:	07e2      	lsls	r2, r4, #31
 8000524:	4315      	orrs	r5, r2
 8000526:	0864      	lsrs	r4, r4, #1
 8000528:	4926      	ldr	r1, [pc, #152]	; (80005c4 <__aeabi_dmul+0x3a8>)
 800052a:	4461      	add	r1, ip
 800052c:	2900      	cmp	r1, #0
 800052e:	dd56      	ble.n	80005de <__aeabi_dmul+0x3c2>
 8000530:	076b      	lsls	r3, r5, #29
 8000532:	d009      	beq.n	8000548 <__aeabi_dmul+0x32c>
 8000534:	220f      	movs	r2, #15
 8000536:	402a      	ands	r2, r5
 8000538:	2a04      	cmp	r2, #4
 800053a:	d005      	beq.n	8000548 <__aeabi_dmul+0x32c>
 800053c:	1d2a      	adds	r2, r5, #4
 800053e:	42aa      	cmp	r2, r5
 8000540:	41ad      	sbcs	r5, r5
 8000542:	426d      	negs	r5, r5
 8000544:	1964      	adds	r4, r4, r5
 8000546:	0015      	movs	r5, r2
 8000548:	01e3      	lsls	r3, r4, #7
 800054a:	d504      	bpl.n	8000556 <__aeabi_dmul+0x33a>
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	4a1e      	ldr	r2, [pc, #120]	; (80005c8 <__aeabi_dmul+0x3ac>)
 8000550:	00c9      	lsls	r1, r1, #3
 8000552:	4014      	ands	r4, r2
 8000554:	4461      	add	r1, ip
 8000556:	4a1d      	ldr	r2, [pc, #116]	; (80005cc <__aeabi_dmul+0x3b0>)
 8000558:	4291      	cmp	r1, r2
 800055a:	dd00      	ble.n	800055e <__aeabi_dmul+0x342>
 800055c:	e724      	b.n	80003a8 <__aeabi_dmul+0x18c>
 800055e:	0762      	lsls	r2, r4, #29
 8000560:	08ed      	lsrs	r5, r5, #3
 8000562:	0264      	lsls	r4, r4, #9
 8000564:	0549      	lsls	r1, r1, #21
 8000566:	4315      	orrs	r5, r2
 8000568:	0b24      	lsrs	r4, r4, #12
 800056a:	0d4a      	lsrs	r2, r1, #21
 800056c:	e6c6      	b.n	80002fc <__aeabi_dmul+0xe0>
 800056e:	9701      	str	r7, [sp, #4]
 8000570:	e6b8      	b.n	80002e4 <__aeabi_dmul+0xc8>
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <__aeabi_dmul+0x398>)
 8000574:	2003      	movs	r0, #3
 8000576:	4694      	mov	ip, r2
 8000578:	4463      	add	r3, ip
 800057a:	464a      	mov	r2, r9
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2303      	movs	r3, #3
 8000580:	431a      	orrs	r2, r3
 8000582:	4691      	mov	r9, r2
 8000584:	4652      	mov	r2, sl
 8000586:	e68a      	b.n	800029e <__aeabi_dmul+0x82>
 8000588:	4649      	mov	r1, r9
 800058a:	2301      	movs	r3, #1
 800058c:	4319      	orrs	r1, r3
 800058e:	4689      	mov	r9, r1
 8000590:	2600      	movs	r6, #0
 8000592:	2001      	movs	r0, #1
 8000594:	e683      	b.n	800029e <__aeabi_dmul+0x82>
 8000596:	220c      	movs	r2, #12
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2303      	movs	r3, #3
 800059c:	0005      	movs	r5, r0
 800059e:	4691      	mov	r9, r2
 80005a0:	469b      	mov	fp, r3
 80005a2:	e65e      	b.n	8000262 <__aeabi_dmul+0x46>
 80005a4:	2304      	movs	r3, #4
 80005a6:	4699      	mov	r9, r3
 80005a8:	2300      	movs	r3, #0
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	2400      	movs	r4, #0
 80005b0:	469b      	mov	fp, r3
 80005b2:	e656      	b.n	8000262 <__aeabi_dmul+0x46>
 80005b4:	000007ff 	.word	0x000007ff
 80005b8:	fffffc01 	.word	0xfffffc01
 80005bc:	08003d70 	.word	0x08003d70
 80005c0:	fffffc0d 	.word	0xfffffc0d
 80005c4:	000003ff 	.word	0x000003ff
 80005c8:	feffffff 	.word	0xfeffffff
 80005cc:	000007fe 	.word	0x000007fe
 80005d0:	2300      	movs	r3, #0
 80005d2:	2480      	movs	r4, #128	; 0x80
 80005d4:	2500      	movs	r5, #0
 80005d6:	4a44      	ldr	r2, [pc, #272]	; (80006e8 <__aeabi_dmul+0x4cc>)
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	0324      	lsls	r4, r4, #12
 80005dc:	e68e      	b.n	80002fc <__aeabi_dmul+0xe0>
 80005de:	2001      	movs	r0, #1
 80005e0:	1a40      	subs	r0, r0, r1
 80005e2:	2838      	cmp	r0, #56	; 0x38
 80005e4:	dd00      	ble.n	80005e8 <__aeabi_dmul+0x3cc>
 80005e6:	e686      	b.n	80002f6 <__aeabi_dmul+0xda>
 80005e8:	281f      	cmp	r0, #31
 80005ea:	dd5b      	ble.n	80006a4 <__aeabi_dmul+0x488>
 80005ec:	221f      	movs	r2, #31
 80005ee:	0023      	movs	r3, r4
 80005f0:	4252      	negs	r2, r2
 80005f2:	1a51      	subs	r1, r2, r1
 80005f4:	40cb      	lsrs	r3, r1
 80005f6:	0019      	movs	r1, r3
 80005f8:	2820      	cmp	r0, #32
 80005fa:	d003      	beq.n	8000604 <__aeabi_dmul+0x3e8>
 80005fc:	4a3b      	ldr	r2, [pc, #236]	; (80006ec <__aeabi_dmul+0x4d0>)
 80005fe:	4462      	add	r2, ip
 8000600:	4094      	lsls	r4, r2
 8000602:	4325      	orrs	r5, r4
 8000604:	1e6a      	subs	r2, r5, #1
 8000606:	4195      	sbcs	r5, r2
 8000608:	002a      	movs	r2, r5
 800060a:	430a      	orrs	r2, r1
 800060c:	2107      	movs	r1, #7
 800060e:	000d      	movs	r5, r1
 8000610:	2400      	movs	r4, #0
 8000612:	4015      	ands	r5, r2
 8000614:	4211      	tst	r1, r2
 8000616:	d05b      	beq.n	80006d0 <__aeabi_dmul+0x4b4>
 8000618:	210f      	movs	r1, #15
 800061a:	2400      	movs	r4, #0
 800061c:	4011      	ands	r1, r2
 800061e:	2904      	cmp	r1, #4
 8000620:	d053      	beq.n	80006ca <__aeabi_dmul+0x4ae>
 8000622:	1d11      	adds	r1, r2, #4
 8000624:	4291      	cmp	r1, r2
 8000626:	4192      	sbcs	r2, r2
 8000628:	4252      	negs	r2, r2
 800062a:	18a4      	adds	r4, r4, r2
 800062c:	000a      	movs	r2, r1
 800062e:	0223      	lsls	r3, r4, #8
 8000630:	d54b      	bpl.n	80006ca <__aeabi_dmul+0x4ae>
 8000632:	2201      	movs	r2, #1
 8000634:	2400      	movs	r4, #0
 8000636:	2500      	movs	r5, #0
 8000638:	e660      	b.n	80002fc <__aeabi_dmul+0xe0>
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	031b      	lsls	r3, r3, #12
 800063e:	421c      	tst	r4, r3
 8000640:	d009      	beq.n	8000656 <__aeabi_dmul+0x43a>
 8000642:	421e      	tst	r6, r3
 8000644:	d107      	bne.n	8000656 <__aeabi_dmul+0x43a>
 8000646:	4333      	orrs	r3, r6
 8000648:	031c      	lsls	r4, r3, #12
 800064a:	4643      	mov	r3, r8
 800064c:	0015      	movs	r5, r2
 800064e:	0b24      	lsrs	r4, r4, #12
 8000650:	4a25      	ldr	r2, [pc, #148]	; (80006e8 <__aeabi_dmul+0x4cc>)
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	e652      	b.n	80002fc <__aeabi_dmul+0xe0>
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	0312      	lsls	r2, r2, #12
 800065a:	4314      	orrs	r4, r2
 800065c:	0324      	lsls	r4, r4, #12
 800065e:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <__aeabi_dmul+0x4cc>)
 8000660:	0b24      	lsrs	r4, r4, #12
 8000662:	9701      	str	r7, [sp, #4]
 8000664:	e64a      	b.n	80002fc <__aeabi_dmul+0xe0>
 8000666:	f000 f8f3 	bl	8000850 <__clzsi2>
 800066a:	0003      	movs	r3, r0
 800066c:	001a      	movs	r2, r3
 800066e:	3215      	adds	r2, #21
 8000670:	3020      	adds	r0, #32
 8000672:	2a1c      	cmp	r2, #28
 8000674:	dc00      	bgt.n	8000678 <__aeabi_dmul+0x45c>
 8000676:	e684      	b.n	8000382 <__aeabi_dmul+0x166>
 8000678:	4656      	mov	r6, sl
 800067a:	3b08      	subs	r3, #8
 800067c:	2200      	movs	r2, #0
 800067e:	409e      	lsls	r6, r3
 8000680:	e689      	b.n	8000396 <__aeabi_dmul+0x17a>
 8000682:	f000 f8e5 	bl	8000850 <__clzsi2>
 8000686:	0001      	movs	r1, r0
 8000688:	0002      	movs	r2, r0
 800068a:	3115      	adds	r1, #21
 800068c:	3220      	adds	r2, #32
 800068e:	291c      	cmp	r1, #28
 8000690:	dc00      	bgt.n	8000694 <__aeabi_dmul+0x478>
 8000692:	e64e      	b.n	8000332 <__aeabi_dmul+0x116>
 8000694:	0034      	movs	r4, r6
 8000696:	3808      	subs	r0, #8
 8000698:	2500      	movs	r5, #0
 800069a:	4084      	lsls	r4, r0
 800069c:	e653      	b.n	8000346 <__aeabi_dmul+0x12a>
 800069e:	9b00      	ldr	r3, [sp, #0]
 80006a0:	469c      	mov	ip, r3
 80006a2:	e741      	b.n	8000528 <__aeabi_dmul+0x30c>
 80006a4:	4912      	ldr	r1, [pc, #72]	; (80006f0 <__aeabi_dmul+0x4d4>)
 80006a6:	0022      	movs	r2, r4
 80006a8:	4461      	add	r1, ip
 80006aa:	002e      	movs	r6, r5
 80006ac:	408d      	lsls	r5, r1
 80006ae:	408a      	lsls	r2, r1
 80006b0:	40c6      	lsrs	r6, r0
 80006b2:	1e69      	subs	r1, r5, #1
 80006b4:	418d      	sbcs	r5, r1
 80006b6:	4332      	orrs	r2, r6
 80006b8:	432a      	orrs	r2, r5
 80006ba:	40c4      	lsrs	r4, r0
 80006bc:	0753      	lsls	r3, r2, #29
 80006be:	d0b6      	beq.n	800062e <__aeabi_dmul+0x412>
 80006c0:	210f      	movs	r1, #15
 80006c2:	4011      	ands	r1, r2
 80006c4:	2904      	cmp	r1, #4
 80006c6:	d1ac      	bne.n	8000622 <__aeabi_dmul+0x406>
 80006c8:	e7b1      	b.n	800062e <__aeabi_dmul+0x412>
 80006ca:	0765      	lsls	r5, r4, #29
 80006cc:	0264      	lsls	r4, r4, #9
 80006ce:	0b24      	lsrs	r4, r4, #12
 80006d0:	08d2      	lsrs	r2, r2, #3
 80006d2:	4315      	orrs	r5, r2
 80006d4:	2200      	movs	r2, #0
 80006d6:	e611      	b.n	80002fc <__aeabi_dmul+0xe0>
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	0312      	lsls	r2, r2, #12
 80006dc:	4314      	orrs	r4, r2
 80006de:	0324      	lsls	r4, r4, #12
 80006e0:	4a01      	ldr	r2, [pc, #4]	; (80006e8 <__aeabi_dmul+0x4cc>)
 80006e2:	0b24      	lsrs	r4, r4, #12
 80006e4:	e60a      	b.n	80002fc <__aeabi_dmul+0xe0>
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	000007ff 	.word	0x000007ff
 80006ec:	0000043e 	.word	0x0000043e
 80006f0:	0000041e 	.word	0x0000041e

080006f4 <__aeabi_ui2d>:
 80006f4:	b510      	push	{r4, lr}
 80006f6:	1e04      	subs	r4, r0, #0
 80006f8:	d010      	beq.n	800071c <__aeabi_ui2d+0x28>
 80006fa:	f000 f8a9 	bl	8000850 <__clzsi2>
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <__aeabi_ui2d+0x48>)
 8000700:	1a1b      	subs	r3, r3, r0
 8000702:	280a      	cmp	r0, #10
 8000704:	dc11      	bgt.n	800072a <__aeabi_ui2d+0x36>
 8000706:	220b      	movs	r2, #11
 8000708:	0021      	movs	r1, r4
 800070a:	1a12      	subs	r2, r2, r0
 800070c:	40d1      	lsrs	r1, r2
 800070e:	3015      	adds	r0, #21
 8000710:	030a      	lsls	r2, r1, #12
 8000712:	055b      	lsls	r3, r3, #21
 8000714:	4084      	lsls	r4, r0
 8000716:	0b12      	lsrs	r2, r2, #12
 8000718:	0d5b      	lsrs	r3, r3, #21
 800071a:	e001      	b.n	8000720 <__aeabi_ui2d+0x2c>
 800071c:	2300      	movs	r3, #0
 800071e:	2200      	movs	r2, #0
 8000720:	051b      	lsls	r3, r3, #20
 8000722:	4313      	orrs	r3, r2
 8000724:	0020      	movs	r0, r4
 8000726:	0019      	movs	r1, r3
 8000728:	bd10      	pop	{r4, pc}
 800072a:	0022      	movs	r2, r4
 800072c:	380b      	subs	r0, #11
 800072e:	4082      	lsls	r2, r0
 8000730:	055b      	lsls	r3, r3, #21
 8000732:	0312      	lsls	r2, r2, #12
 8000734:	2400      	movs	r4, #0
 8000736:	0b12      	lsrs	r2, r2, #12
 8000738:	0d5b      	lsrs	r3, r3, #21
 800073a:	e7f1      	b.n	8000720 <__aeabi_ui2d+0x2c>
 800073c:	0000041e 	.word	0x0000041e

08000740 <__aeabi_d2f>:
 8000740:	0002      	movs	r2, r0
 8000742:	004b      	lsls	r3, r1, #1
 8000744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000746:	0308      	lsls	r0, r1, #12
 8000748:	0d5b      	lsrs	r3, r3, #21
 800074a:	4e3d      	ldr	r6, [pc, #244]	; (8000840 <__aeabi_d2f+0x100>)
 800074c:	0fcc      	lsrs	r4, r1, #31
 800074e:	0a40      	lsrs	r0, r0, #9
 8000750:	0f51      	lsrs	r1, r2, #29
 8000752:	1c5f      	adds	r7, r3, #1
 8000754:	4308      	orrs	r0, r1
 8000756:	00d5      	lsls	r5, r2, #3
 8000758:	4237      	tst	r7, r6
 800075a:	d00a      	beq.n	8000772 <__aeabi_d2f+0x32>
 800075c:	4939      	ldr	r1, [pc, #228]	; (8000844 <__aeabi_d2f+0x104>)
 800075e:	185e      	adds	r6, r3, r1
 8000760:	2efe      	cmp	r6, #254	; 0xfe
 8000762:	dd16      	ble.n	8000792 <__aeabi_d2f+0x52>
 8000764:	23ff      	movs	r3, #255	; 0xff
 8000766:	2100      	movs	r1, #0
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	430b      	orrs	r3, r1
 800076c:	07e0      	lsls	r0, r4, #31
 800076e:	4318      	orrs	r0, r3
 8000770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000772:	2b00      	cmp	r3, #0
 8000774:	d106      	bne.n	8000784 <__aeabi_d2f+0x44>
 8000776:	4328      	orrs	r0, r5
 8000778:	d027      	beq.n	80007ca <__aeabi_d2f+0x8a>
 800077a:	2105      	movs	r1, #5
 800077c:	0189      	lsls	r1, r1, #6
 800077e:	0a49      	lsrs	r1, r1, #9
 8000780:	b2db      	uxtb	r3, r3
 8000782:	e7f1      	b.n	8000768 <__aeabi_d2f+0x28>
 8000784:	4305      	orrs	r5, r0
 8000786:	d0ed      	beq.n	8000764 <__aeabi_d2f+0x24>
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	03c9      	lsls	r1, r1, #15
 800078c:	23ff      	movs	r3, #255	; 0xff
 800078e:	4301      	orrs	r1, r0
 8000790:	e7ea      	b.n	8000768 <__aeabi_d2f+0x28>
 8000792:	2e00      	cmp	r6, #0
 8000794:	dd1c      	ble.n	80007d0 <__aeabi_d2f+0x90>
 8000796:	0192      	lsls	r2, r2, #6
 8000798:	0011      	movs	r1, r2
 800079a:	1e4a      	subs	r2, r1, #1
 800079c:	4191      	sbcs	r1, r2
 800079e:	00c0      	lsls	r0, r0, #3
 80007a0:	0f6d      	lsrs	r5, r5, #29
 80007a2:	4301      	orrs	r1, r0
 80007a4:	4329      	orrs	r1, r5
 80007a6:	074b      	lsls	r3, r1, #29
 80007a8:	d048      	beq.n	800083c <__aeabi_d2f+0xfc>
 80007aa:	230f      	movs	r3, #15
 80007ac:	400b      	ands	r3, r1
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	d000      	beq.n	80007b4 <__aeabi_d2f+0x74>
 80007b2:	3104      	adds	r1, #4
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	04db      	lsls	r3, r3, #19
 80007b8:	400b      	ands	r3, r1
 80007ba:	d03f      	beq.n	800083c <__aeabi_d2f+0xfc>
 80007bc:	1c72      	adds	r2, r6, #1
 80007be:	2efe      	cmp	r6, #254	; 0xfe
 80007c0:	d0d0      	beq.n	8000764 <__aeabi_d2f+0x24>
 80007c2:	0189      	lsls	r1, r1, #6
 80007c4:	0a49      	lsrs	r1, r1, #9
 80007c6:	b2d3      	uxtb	r3, r2
 80007c8:	e7ce      	b.n	8000768 <__aeabi_d2f+0x28>
 80007ca:	2300      	movs	r3, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	e7cb      	b.n	8000768 <__aeabi_d2f+0x28>
 80007d0:	0032      	movs	r2, r6
 80007d2:	3217      	adds	r2, #23
 80007d4:	db22      	blt.n	800081c <__aeabi_d2f+0xdc>
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	221e      	movs	r2, #30
 80007da:	0409      	lsls	r1, r1, #16
 80007dc:	4308      	orrs	r0, r1
 80007de:	1b92      	subs	r2, r2, r6
 80007e0:	2a1f      	cmp	r2, #31
 80007e2:	dd1d      	ble.n	8000820 <__aeabi_d2f+0xe0>
 80007e4:	2102      	movs	r1, #2
 80007e6:	4249      	negs	r1, r1
 80007e8:	1b8e      	subs	r6, r1, r6
 80007ea:	0001      	movs	r1, r0
 80007ec:	40f1      	lsrs	r1, r6
 80007ee:	000e      	movs	r6, r1
 80007f0:	2a20      	cmp	r2, #32
 80007f2:	d004      	beq.n	80007fe <__aeabi_d2f+0xbe>
 80007f4:	4a14      	ldr	r2, [pc, #80]	; (8000848 <__aeabi_d2f+0x108>)
 80007f6:	4694      	mov	ip, r2
 80007f8:	4463      	add	r3, ip
 80007fa:	4098      	lsls	r0, r3
 80007fc:	4305      	orrs	r5, r0
 80007fe:	0029      	movs	r1, r5
 8000800:	1e4d      	subs	r5, r1, #1
 8000802:	41a9      	sbcs	r1, r5
 8000804:	4331      	orrs	r1, r6
 8000806:	2600      	movs	r6, #0
 8000808:	074b      	lsls	r3, r1, #29
 800080a:	d1ce      	bne.n	80007aa <__aeabi_d2f+0x6a>
 800080c:	2080      	movs	r0, #128	; 0x80
 800080e:	000b      	movs	r3, r1
 8000810:	04c0      	lsls	r0, r0, #19
 8000812:	2201      	movs	r2, #1
 8000814:	4003      	ands	r3, r0
 8000816:	4201      	tst	r1, r0
 8000818:	d1d3      	bne.n	80007c2 <__aeabi_d2f+0x82>
 800081a:	e7af      	b.n	800077c <__aeabi_d2f+0x3c>
 800081c:	2300      	movs	r3, #0
 800081e:	e7ac      	b.n	800077a <__aeabi_d2f+0x3a>
 8000820:	490a      	ldr	r1, [pc, #40]	; (800084c <__aeabi_d2f+0x10c>)
 8000822:	468c      	mov	ip, r1
 8000824:	0029      	movs	r1, r5
 8000826:	4463      	add	r3, ip
 8000828:	40d1      	lsrs	r1, r2
 800082a:	409d      	lsls	r5, r3
 800082c:	000a      	movs	r2, r1
 800082e:	0029      	movs	r1, r5
 8000830:	4098      	lsls	r0, r3
 8000832:	1e4d      	subs	r5, r1, #1
 8000834:	41a9      	sbcs	r1, r5
 8000836:	4301      	orrs	r1, r0
 8000838:	4311      	orrs	r1, r2
 800083a:	e7e4      	b.n	8000806 <__aeabi_d2f+0xc6>
 800083c:	0033      	movs	r3, r6
 800083e:	e79d      	b.n	800077c <__aeabi_d2f+0x3c>
 8000840:	000007fe 	.word	0x000007fe
 8000844:	fffffc80 	.word	0xfffffc80
 8000848:	fffffca2 	.word	0xfffffca2
 800084c:	fffffc82 	.word	0xfffffc82

08000850 <__clzsi2>:
 8000850:	211c      	movs	r1, #28
 8000852:	2301      	movs	r3, #1
 8000854:	041b      	lsls	r3, r3, #16
 8000856:	4298      	cmp	r0, r3
 8000858:	d301      	bcc.n	800085e <__clzsi2+0xe>
 800085a:	0c00      	lsrs	r0, r0, #16
 800085c:	3910      	subs	r1, #16
 800085e:	0a1b      	lsrs	r3, r3, #8
 8000860:	4298      	cmp	r0, r3
 8000862:	d301      	bcc.n	8000868 <__clzsi2+0x18>
 8000864:	0a00      	lsrs	r0, r0, #8
 8000866:	3908      	subs	r1, #8
 8000868:	091b      	lsrs	r3, r3, #4
 800086a:	4298      	cmp	r0, r3
 800086c:	d301      	bcc.n	8000872 <__clzsi2+0x22>
 800086e:	0900      	lsrs	r0, r0, #4
 8000870:	3904      	subs	r1, #4
 8000872:	a202      	add	r2, pc, #8	; (adr r2, 800087c <__clzsi2+0x2c>)
 8000874:	5c10      	ldrb	r0, [r2, r0]
 8000876:	1840      	adds	r0, r0, r1
 8000878:	4770      	bx	lr
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	02020304 	.word	0x02020304
 8000880:	01010101 	.word	0x01010101
	...

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000892:	f000 fc55 	bl	8001140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000896:	f000 f98d 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089a:	f000 fa71 	bl	8000d80 <MX_GPIO_Init>
  MX_DMA_Init();
 800089e:	f000 fa51 	bl	8000d44 <MX_DMA_Init>
  MX_ADC1_Init();
 80008a2:	f000 f9e5 	bl	8000c70 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)e_analogica, 50);
 80008a6:	49b4      	ldr	r1, [pc, #720]	; (8000b78 <main+0x2ec>)
 80008a8:	4bb4      	ldr	r3, [pc, #720]	; (8000b7c <main+0x2f0>)
 80008aa:	2232      	movs	r2, #50	; 0x32
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 f801 	bl	80018b4 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADCEx_Calibration_Start(&hadc1);
 80008b2:	4bb2      	ldr	r3, [pc, #712]	; (8000b7c <main+0x2f0>)
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 fc11 	bl	80020dc <HAL_ADCEx_Calibration_Start>

  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)e_analogica, 50);
 80008ba:	49af      	ldr	r1, [pc, #700]	; (8000b78 <main+0x2ec>)
 80008bc:	4baf      	ldr	r3, [pc, #700]	; (8000b7c <main+0x2f0>)
 80008be:	2232      	movs	r2, #50	; 0x32
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 fff7 	bl	80018b4 <HAL_ADC_Start_DMA>
	  HAL_DMA_PollForTransfer(&hdma_adc1, HAL_DMA_FULL_TRANSFER, 1000);
 80008c6:	23fa      	movs	r3, #250	; 0xfa
 80008c8:	009a      	lsls	r2, r3, #2
 80008ca:	4bad      	ldr	r3, [pc, #692]	; (8000b80 <main+0x2f4>)
 80008cc:	2100      	movs	r1, #0
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 fe96 	bl	8002600 <HAL_DMA_PollForTransfer>

	  media = 0;
 80008d4:	4bab      	ldr	r3, [pc, #684]	; (8000b84 <main+0x2f8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]

	  for(int i=0; i<50; i++){
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	e00b      	b.n	80008f8 <main+0x6c>
		  media = media + e_analogica[i];
 80008e0:	4ba5      	ldr	r3, [pc, #660]	; (8000b78 <main+0x2ec>)
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	0092      	lsls	r2, r2, #2
 80008e6:	58d2      	ldr	r2, [r2, r3]
 80008e8:	4ba6      	ldr	r3, [pc, #664]	; (8000b84 <main+0x2f8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	18d2      	adds	r2, r2, r3
 80008ee:	4ba5      	ldr	r3, [pc, #660]	; (8000b84 <main+0x2f8>)
 80008f0:	601a      	str	r2, [r3, #0]
	  for(int i=0; i<50; i++){
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3301      	adds	r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b31      	cmp	r3, #49	; 0x31
 80008fc:	ddf0      	ble.n	80008e0 <main+0x54>
	  }

	  media = media/50;
 80008fe:	4ba1      	ldr	r3, [pc, #644]	; (8000b84 <main+0x2f8>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2132      	movs	r1, #50	; 0x32
 8000904:	0018      	movs	r0, r3
 8000906:	f7ff fbfd 	bl	8000104 <__udivsi3>
 800090a:	0003      	movs	r3, r0
 800090c:	001a      	movs	r2, r3
 800090e:	4b9d      	ldr	r3, [pc, #628]	; (8000b84 <main+0x2f8>)
 8000910:	601a      	str	r2, [r3, #0]

	  tensao = media * (5.0/ 4095);
 8000912:	4b9c      	ldr	r3, [pc, #624]	; (8000b84 <main+0x2f8>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	0018      	movs	r0, r3
 8000918:	f7ff feec 	bl	80006f4 <__aeabi_ui2d>
 800091c:	4a9a      	ldr	r2, [pc, #616]	; (8000b88 <main+0x2fc>)
 800091e:	4b9b      	ldr	r3, [pc, #620]	; (8000b8c <main+0x300>)
 8000920:	f7ff fc7c 	bl	800021c <__aeabi_dmul>
 8000924:	0002      	movs	r2, r0
 8000926:	000b      	movs	r3, r1
 8000928:	0010      	movs	r0, r2
 800092a:	0019      	movs	r1, r3
 800092c:	f7ff ff08 	bl	8000740 <__aeabi_d2f>
 8000930:	1c02      	adds	r2, r0, #0
 8000932:	4b97      	ldr	r3, [pc, #604]	; (8000b90 <main+0x304>)
 8000934:	601a      	str	r2, [r3, #0]

	  if(media > 3045){    //verde
 8000936:	4b93      	ldr	r3, [pc, #588]	; (8000b84 <main+0x2f8>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a96      	ldr	r2, [pc, #600]	; (8000b94 <main+0x308>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d90f      	bls.n	8000960 <main+0xd4>
		  if(controle == 2){
 8000940:	4b95      	ldr	r3, [pc, #596]	; (8000b98 <main+0x30c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d103      	bne.n	8000950 <main+0xc4>
			  controle = 1;
 8000948:	4b93      	ldr	r3, [pc, #588]	; (8000b98 <main+0x30c>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	e029      	b.n	80009a4 <main+0x118>
		  } else if(controle == 3){
 8000950:	4b91      	ldr	r3, [pc, #580]	; (8000b98 <main+0x30c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b03      	cmp	r3, #3
 8000956:	d125      	bne.n	80009a4 <main+0x118>
			  controle = 2;
 8000958:	4b8f      	ldr	r3, [pc, #572]	; (8000b98 <main+0x30c>)
 800095a:	2202      	movs	r2, #2
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	e021      	b.n	80009a4 <main+0x118>
		  }

	  } else if(media < 3045 && media > 3000){  //amarelo
 8000960:	4b88      	ldr	r3, [pc, #544]	; (8000b84 <main+0x2f8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a8d      	ldr	r2, [pc, #564]	; (8000b9c <main+0x310>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d808      	bhi.n	800097c <main+0xf0>
 800096a:	4b86      	ldr	r3, [pc, #536]	; (8000b84 <main+0x2f8>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a8c      	ldr	r2, [pc, #560]	; (8000ba0 <main+0x314>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d903      	bls.n	800097c <main+0xf0>
		  controle = 2;
 8000974:	4b88      	ldr	r3, [pc, #544]	; (8000b98 <main+0x30c>)
 8000976:	2202      	movs	r2, #2
 8000978:	701a      	strb	r2, [r3, #0]
 800097a:	e013      	b.n	80009a4 <main+0x118>

	  } else if(media < 3000){   //vermelho
 800097c:	4b81      	ldr	r3, [pc, #516]	; (8000b84 <main+0x2f8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a88      	ldr	r2, [pc, #544]	; (8000ba4 <main+0x318>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d80e      	bhi.n	80009a4 <main+0x118>
		  if(controle == 2){
 8000986:	4b84      	ldr	r3, [pc, #528]	; (8000b98 <main+0x30c>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b02      	cmp	r3, #2
 800098c:	d103      	bne.n	8000996 <main+0x10a>
			  controle = 3;
 800098e:	4b82      	ldr	r3, [pc, #520]	; (8000b98 <main+0x30c>)
 8000990:	2203      	movs	r2, #3
 8000992:	701a      	strb	r2, [r3, #0]
 8000994:	e006      	b.n	80009a4 <main+0x118>

		  } else if(controle == 1){
 8000996:	4b80      	ldr	r3, [pc, #512]	; (8000b98 <main+0x30c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d102      	bne.n	80009a4 <main+0x118>
			  controle = 2;
 800099e:	4b7e      	ldr	r3, [pc, #504]	; (8000b98 <main+0x30c>)
 80009a0:	2202      	movs	r2, #2
 80009a2:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  switch(controle){
 80009a4:	4b7c      	ldr	r3, [pc, #496]	; (8000b98 <main+0x30c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d002      	beq.n	80009b2 <main+0x126>
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d04b      	beq.n	8000a48 <main+0x1bc>
 80009b0:	e095      	b.n	8000ade <main+0x252>
	  case 1:
		  HAL_GPIO_WritePin(Verde_GPIO_Port, Verde_Pin, 0);
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	01db      	lsls	r3, r3, #7
 80009b6:	487c      	ldr	r0, [pc, #496]	; (8000ba8 <main+0x31c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	0019      	movs	r1, r3
 80009bc:	f002 f9d8 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Amarelo_GPIO_Port, Amarelo_Pin, 1);
 80009c0:	4b79      	ldr	r3, [pc, #484]	; (8000ba8 <main+0x31c>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	2110      	movs	r1, #16
 80009c6:	0018      	movs	r0, r3
 80009c8:	f002 f9d2 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Vermelho_GPIO_Port, Vermelho_Pin, 1);
 80009cc:	4b76      	ldr	r3, [pc, #472]	; (8000ba8 <main+0x31c>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	2108      	movs	r1, #8
 80009d2:	0018      	movs	r0, r3
 80009d4:	f002 f9cc 	bl	8002d70 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 80009d8:	23a0      	movs	r3, #160	; 0xa0
 80009da:	05db      	lsls	r3, r3, #23
 80009dc:	2201      	movs	r2, #1
 80009de:	2180      	movs	r1, #128	; 0x80
 80009e0:	0018      	movs	r0, r3
 80009e2:	f002 f9c5 	bl	8002d70 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 0);
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4870      	ldr	r0, [pc, #448]	; (8000bac <main+0x320>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	0019      	movs	r1, r3
 80009f0:	f002 f9be 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 0);
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	486c      	ldr	r0, [pc, #432]	; (8000bac <main+0x320>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	0019      	movs	r1, r3
 80009fe:	f002 f9b7 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 8000a02:	23a0      	movs	r3, #160	; 0xa0
 8000a04:	05db      	lsls	r3, r3, #23
 8000a06:	2201      	movs	r2, #1
 8000a08:	2104      	movs	r1, #4
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f002 f9b0 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	019b      	lsls	r3, r3, #6
 8000a14:	4864      	ldr	r0, [pc, #400]	; (8000ba8 <main+0x31c>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	0019      	movs	r1, r3
 8000a1a:	f002 f9a9 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 0);
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	00d9      	lsls	r1, r3, #3
 8000a22:	23a0      	movs	r3, #160	; 0xa0
 8000a24:	05db      	lsls	r3, r3, #23
 8000a26:	2200      	movs	r2, #0
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f002 f9a1 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 0);
 8000a2e:	4b60      	ldr	r3, [pc, #384]	; (8000bb0 <main+0x324>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	2110      	movs	r1, #16
 8000a34:	0018      	movs	r0, r3
 8000a36:	f002 f99b 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 0);
 8000a3a:	4b5d      	ldr	r3, [pc, #372]	; (8000bb0 <main+0x324>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2120      	movs	r1, #32
 8000a40:	0018      	movs	r0, r3
 8000a42:	f002 f995 	bl	8002d70 <HAL_GPIO_WritePin>

	  break;
 8000a46:	e095      	b.n	8000b74 <main+0x2e8>

	  case 2:
		  HAL_GPIO_WritePin(Verde_GPIO_Port, Verde_Pin, 1);
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	01db      	lsls	r3, r3, #7
 8000a4c:	4856      	ldr	r0, [pc, #344]	; (8000ba8 <main+0x31c>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	0019      	movs	r1, r3
 8000a52:	f002 f98d 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Amarelo_GPIO_Port, Amarelo_Pin, 0);
 8000a56:	4b54      	ldr	r3, [pc, #336]	; (8000ba8 <main+0x31c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f002 f987 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Vermelho_GPIO_Port, Vermelho_Pin, 1);
 8000a62:	4b51      	ldr	r3, [pc, #324]	; (8000ba8 <main+0x31c>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	2108      	movs	r1, #8
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f002 f981 	bl	8002d70 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000a6e:	23a0      	movs	r3, #160	; 0xa0
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	2201      	movs	r2, #1
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	0018      	movs	r0, r3
 8000a78:	f002 f97a 	bl	8002d70 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	484a      	ldr	r0, [pc, #296]	; (8000bac <main+0x320>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	0019      	movs	r1, r3
 8000a86:	f002 f973 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4847      	ldr	r0, [pc, #284]	; (8000bac <main+0x320>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	0019      	movs	r1, r3
 8000a94:	f002 f96c 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 0);
 8000a98:	23a0      	movs	r3, #160	; 0xa0
 8000a9a:	05db      	lsls	r3, r3, #23
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f002 f965 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	019b      	lsls	r3, r3, #6
 8000aaa:	483f      	ldr	r0, [pc, #252]	; (8000ba8 <main+0x31c>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	0019      	movs	r1, r3
 8000ab0:	f002 f95e 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	00d9      	lsls	r1, r3, #3
 8000ab8:	23a0      	movs	r3, #160	; 0xa0
 8000aba:	05db      	lsls	r3, r3, #23
 8000abc:	2201      	movs	r2, #1
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f002 f956 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 0);
 8000ac4:	4b3a      	ldr	r3, [pc, #232]	; (8000bb0 <main+0x324>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2110      	movs	r1, #16
 8000aca:	0018      	movs	r0, r3
 8000acc:	f002 f950 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 8000ad0:	4b37      	ldr	r3, [pc, #220]	; (8000bb0 <main+0x324>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f002 f94a 	bl	8002d70 <HAL_GPIO_WritePin>

	  break;
 8000adc:	e04a      	b.n	8000b74 <main+0x2e8>

	  default:
		  HAL_GPIO_WritePin(Verde_GPIO_Port, Verde_Pin, 1);
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	01db      	lsls	r3, r3, #7
 8000ae2:	4831      	ldr	r0, [pc, #196]	; (8000ba8 <main+0x31c>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	0019      	movs	r1, r3
 8000ae8:	f002 f942 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Amarelo_GPIO_Port, Amarelo_Pin, 1);
 8000aec:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <main+0x31c>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	2110      	movs	r1, #16
 8000af2:	0018      	movs	r0, r3
 8000af4:	f002 f93c 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Vermelho_GPIO_Port, Vermelho_Pin, 0);
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <main+0x31c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	2108      	movs	r1, #8
 8000afe:	0018      	movs	r0, r3
 8000b00:	f002 f936 	bl	8002d70 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000b04:	23a0      	movs	r3, #160	; 0xa0
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2180      	movs	r1, #128	; 0x80
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f002 f92f 	bl	8002d70 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 0);
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4825      	ldr	r0, [pc, #148]	; (8000bac <main+0x320>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	f002 f928 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	4821      	ldr	r0, [pc, #132]	; (8000bac <main+0x320>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	0019      	movs	r1, r3
 8000b2a:	f002 f921 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 8000b2e:	23a0      	movs	r3, #160	; 0xa0
 8000b30:	05db      	lsls	r3, r3, #23
 8000b32:	2201      	movs	r2, #1
 8000b34:	2104      	movs	r1, #4
 8000b36:	0018      	movs	r0, r3
 8000b38:	f002 f91a 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	019b      	lsls	r3, r3, #6
 8000b40:	4819      	ldr	r0, [pc, #100]	; (8000ba8 <main+0x31c>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	0019      	movs	r1, r3
 8000b46:	f002 f913 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	00d9      	lsls	r1, r3, #3
 8000b4e:	23a0      	movs	r3, #160	; 0xa0
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	2201      	movs	r2, #1
 8000b54:	0018      	movs	r0, r3
 8000b56:	f002 f90b 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 0);
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <main+0x324>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2110      	movs	r1, #16
 8000b60:	0018      	movs	r0, r3
 8000b62:	f002 f905 	bl	8002d70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <main+0x324>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2120      	movs	r1, #32
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f002 f8ff 	bl	8002d70 <HAL_GPIO_WritePin>

	  break;
 8000b72:	46c0      	nop			; (mov r8, r8)
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)e_analogica, 50);
 8000b74:	e6a1      	b.n	80008ba <main+0x2e>
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	2000002c 	.word	0x2000002c
 8000b7c:	200000f8 	.word	0x200000f8
 8000b80:	2000015c 	.word	0x2000015c
 8000b84:	200001bc 	.word	0x200001bc
 8000b88:	14014014 	.word	0x14014014
 8000b8c:	3f540140 	.word	0x3f540140
 8000b90:	200000f4 	.word	0x200000f4
 8000b94:	00000be5 	.word	0x00000be5
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	00000be4 	.word	0x00000be4
 8000ba0:	00000bb8 	.word	0x00000bb8
 8000ba4:	00000bb7 	.word	0x00000bb7
 8000ba8:	50000400 	.word	0x50000400
 8000bac:	50000c00 	.word	0x50000c00
 8000bb0:	50000800 	.word	0x50000800

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b095      	sub	sp, #84	; 0x54
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	2414      	movs	r4, #20
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	233c      	movs	r3, #60	; 0x3c
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f003 f8bf 	bl	8003d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	0018      	movs	r0, r3
 8000bce:	2310      	movs	r3, #16
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f003 f8b8 	bl	8003d48 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f002 f923 	bl	8002e28 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	2202      	movs	r2, #2
 8000be6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	0052      	lsls	r2, r2, #1
 8000bee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000bf0:	0021      	movs	r1, r4
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2240      	movs	r2, #64	; 0x40
 8000bfc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2202      	movs	r2, #2
 8000c02:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2202      	movs	r2, #2
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2208      	movs	r2, #8
 8000c14:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	2280      	movs	r2, #128	; 0x80
 8000c1a:	0292      	lsls	r2, r2, #10
 8000c1c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2280      	movs	r2, #128	; 0x80
 8000c22:	0492      	lsls	r2, r2, #18
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	0592      	lsls	r2, r2, #22
 8000c2c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	0018      	movs	r0, r3
 8000c32:	f002 f939 	bl	8002ea8 <HAL_RCC_OscConfig>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c3a:	f000 f96b 	bl	8000f14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2207      	movs	r2, #7
 8000c42:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2202      	movs	r2, #2
 8000c48:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2102      	movs	r1, #2
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f002 fc8a 	bl	8003574 <HAL_RCC_ClockConfig>
 8000c60:	1e03      	subs	r3, r0, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c64:	f000 f956 	bl	8000f14 <Error_Handler>
  }
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b015      	add	sp, #84	; 0x54
 8000c6e:	bd90      	pop	{r4, r7, pc}

08000c70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	0018      	movs	r0, r3
 8000c7a:	230c      	movs	r3, #12
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	f003 f862 	bl	8003d48 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c84:	4b2d      	ldr	r3, [pc, #180]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000c86:	4a2e      	ldr	r2, [pc, #184]	; (8000d40 <MX_ADC1_Init+0xd0>)
 8000c88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c8a:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	05d2      	lsls	r2, r2, #23
 8000c90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c92:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c98:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c9e:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca4:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000caa:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cb6:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000cc4:	2220      	movs	r2, #32
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000cd8:	222c      	movs	r2, #44	; 0x2c
 8000cda:	2100      	movs	r1, #0
 8000cdc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000ce6:	2206      	movs	r2, #6
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000cec:	2206      	movs	r2, #6
 8000cee:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000cf2:	223c      	movs	r2, #60	; 0x3c
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000d00:	0018      	movs	r0, r3
 8000d02:	f000 fbf9 	bl	80014f8 <HAL_ADC_Init>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d001      	beq.n	8000d0e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000d0a:	f000 f903 	bl	8000f14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2201      	movs	r2, #1
 8000d12:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d20:	1d3a      	adds	r2, r7, #4
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_ADC1_Init+0xcc>)
 8000d24:	0011      	movs	r1, r2
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 fe6a 	bl	8001a00 <HAL_ADC_ConfigChannel>
 8000d2c:	1e03      	subs	r3, r0, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000d30:	f000 f8f0 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b004      	add	sp, #16
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200000f8 	.word	0x200000f8
 8000d40:	40012400 	.word	0x40012400

08000d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_DMA_Init+0x38>)
 8000d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_DMA_Init+0x38>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	430a      	orrs	r2, r1
 8000d54:	639a      	str	r2, [r3, #56]	; 0x38
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_DMA_Init+0x38>)
 8000d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2009      	movs	r0, #9
 8000d68:	f001 fae6 	bl	8002338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d6c:	2009      	movs	r0, #9
 8000d6e:	f001 faf8 	bl	8002362 <HAL_NVIC_EnableIRQ>

}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	40021000 	.word	0x40021000

08000d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b08b      	sub	sp, #44	; 0x2c
 8000d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	2414      	movs	r4, #20
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	2314      	movs	r3, #20
 8000d8e:	001a      	movs	r2, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	f002 ffd9 	bl	8003d48 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	4b59      	ldr	r3, [pc, #356]	; (8000efc <MX_GPIO_Init+0x17c>)
 8000d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d9a:	4b58      	ldr	r3, [pc, #352]	; (8000efc <MX_GPIO_Init+0x17c>)
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	635a      	str	r2, [r3, #52]	; 0x34
 8000da2:	4b56      	ldr	r3, [pc, #344]	; (8000efc <MX_GPIO_Init+0x17c>)
 8000da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da6:	2204      	movs	r2, #4
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b53      	ldr	r3, [pc, #332]	; (8000efc <MX_GPIO_Init+0x17c>)
 8000db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000db2:	4b52      	ldr	r3, [pc, #328]	; (8000efc <MX_GPIO_Init+0x17c>)
 8000db4:	2101      	movs	r1, #1
 8000db6:	430a      	orrs	r2, r1
 8000db8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dba:	4b50      	ldr	r3, [pc, #320]	; (8000efc <MX_GPIO_Init+0x17c>)
 8000dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	4b4d      	ldr	r3, [pc, #308]	; (8000efc <MX_GPIO_Init+0x17c>)
 8000dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dca:	4b4c      	ldr	r3, [pc, #304]	; (8000efc <MX_GPIO_Init+0x17c>)
 8000dcc:	2102      	movs	r1, #2
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	635a      	str	r2, [r3, #52]	; 0x34
 8000dd2:	4b4a      	ldr	r3, [pc, #296]	; (8000efc <MX_GPIO_Init+0x17c>)
 8000dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	4b47      	ldr	r3, [pc, #284]	; (8000efc <MX_GPIO_Init+0x17c>)
 8000de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000de2:	4b46      	ldr	r3, [pc, #280]	; (8000efc <MX_GPIO_Init+0x17c>)
 8000de4:	2108      	movs	r1, #8
 8000de6:	430a      	orrs	r2, r1
 8000de8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dea:	4b44      	ldr	r3, [pc, #272]	; (8000efc <MX_GPIO_Init+0x17c>)
 8000dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dee:	2208      	movs	r2, #8
 8000df0:	4013      	ands	r3, r2
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, C_4_Pin|D2_Pin|A_7_Pin, GPIO_PIN_RESET);
 8000df6:	4942      	ldr	r1, [pc, #264]	; (8000f00 <MX_GPIO_Init+0x180>)
 8000df8:	23a0      	movs	r3, #160	; 0xa0
 8000dfa:	05db      	lsls	r3, r3, #23
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 ffb6 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, F_9_Pin|G_10_Pin, GPIO_PIN_RESET);
 8000e04:	4b3f      	ldr	r3, [pc, #252]	; (8000f04 <MX_GPIO_Init+0x184>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	2130      	movs	r1, #48	; 0x30
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f001 ffb0 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D1_Pin|B_6_Pin|Verde_Pin|Vermelho_Pin
 8000e10:	493d      	ldr	r1, [pc, #244]	; (8000f08 <MX_GPIO_Init+0x188>)
 8000e12:	4b3e      	ldr	r3, [pc, #248]	; (8000f0c <MX_GPIO_Init+0x18c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	0018      	movs	r0, r3
 8000e18:	f001 ffaa 	bl	8002d70 <HAL_GPIO_WritePin>
                          |Amarelo_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D_2_Pin|E_1_Pin, GPIO_PIN_RESET);
 8000e1c:	23c0      	movs	r3, #192	; 0xc0
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	483b      	ldr	r0, [pc, #236]	; (8000f10 <MX_GPIO_Init+0x190>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	0019      	movs	r1, r3
 8000e26:	f001 ffa3 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000e2a:	193b      	adds	r3, r7, r4
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	0192      	lsls	r2, r2, #6
 8000e30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	2288      	movs	r2, #136	; 0x88
 8000e36:	0352      	lsls	r2, r2, #13
 8000e38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	4a30      	ldr	r2, [pc, #192]	; (8000f04 <MX_GPIO_Init+0x184>)
 8000e44:	0019      	movs	r1, r3
 8000e46:	0010      	movs	r0, r2
 8000e48:	f001 fe26 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_4_Pin D2_Pin A_7_Pin */
  GPIO_InitStruct.Pin = C_4_Pin|D2_Pin|A_7_Pin;
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	4a2c      	ldr	r2, [pc, #176]	; (8000f00 <MX_GPIO_Init+0x180>)
 8000e50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	2201      	movs	r2, #1
 8000e56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	193a      	adds	r2, r7, r4
 8000e66:	23a0      	movs	r3, #160	; 0xa0
 8000e68:	05db      	lsls	r3, r3, #23
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f001 fe13 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : F_9_Pin G_10_Pin */
  GPIO_InitStruct.Pin = F_9_Pin|G_10_Pin;
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	2230      	movs	r2, #48	; 0x30
 8000e76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	; (8000f04 <MX_GPIO_Init+0x184>)
 8000e8e:	0019      	movs	r1, r3
 8000e90:	0010      	movs	r0, r2
 8000e92:	f001 fe01 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin B_6_Pin Verde_Pin Vermelho_Pin
                           Amarelo_Pin */
  GPIO_InitStruct.Pin = D1_Pin|B_6_Pin|Verde_Pin|Vermelho_Pin
 8000e96:	193b      	adds	r3, r7, r4
 8000e98:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <MX_GPIO_Init+0x188>)
 8000e9a:	601a      	str	r2, [r3, #0]
                          |Amarelo_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	193b      	adds	r3, r7, r4
 8000eb0:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <MX_GPIO_Init+0x18c>)
 8000eb2:	0019      	movs	r1, r3
 8000eb4:	0010      	movs	r0, r2
 8000eb6:	f001 fdef 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_2_Pin E_1_Pin */
  GPIO_InitStruct.Pin = D_2_Pin|E_1_Pin;
 8000eba:	0021      	movs	r1, r4
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	22c0      	movs	r2, #192	; 0xc0
 8000ec0:	0092      	lsls	r2, r2, #2
 8000ec2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <MX_GPIO_Init+0x190>)
 8000eda:	0019      	movs	r1, r3
 8000edc:	0010      	movs	r0, r2
 8000ede:	f001 fddb 	bl	8002a98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2007      	movs	r0, #7
 8000ee8:	f001 fa26 	bl	8002338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000eec:	2007      	movs	r0, #7
 8000eee:	f001 fa38 	bl	8002362 <HAL_NVIC_EnableIRQ>

}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b00b      	add	sp, #44	; 0x2c
 8000ef8:	bd90      	pop	{r4, r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	40021000 	.word	0x40021000
 8000f00:	00000484 	.word	0x00000484
 8000f04:	50000800 	.word	0x50000800
 8000f08:	00006019 	.word	0x00006019
 8000f0c:	50000400 	.word	0x50000400
 8000f10:	50000c00 	.word	0x50000c00

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <Error_Handler+0x8>
	...

08000f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	641a      	str	r2, [r3, #64]	; 0x40
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	2201      	movs	r2, #1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	0549      	lsls	r1, r1, #21
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	055b      	lsls	r3, r3, #21
 8000f54:	4013      	ands	r3, r2
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000f5a:	23c0      	movs	r3, #192	; 0xc0
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 f974 	bl	800124c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b002      	add	sp, #8
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b09d      	sub	sp, #116	; 0x74
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	235c      	movs	r3, #92	; 0x5c
 8000f7a:	18fb      	adds	r3, r7, r3
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	2314      	movs	r3, #20
 8000f80:	001a      	movs	r2, r3
 8000f82:	2100      	movs	r1, #0
 8000f84:	f002 fee0 	bl	8003d48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f88:	2410      	movs	r4, #16
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	234c      	movs	r3, #76	; 0x4c
 8000f90:	001a      	movs	r2, r3
 8000f92:	2100      	movs	r1, #0
 8000f94:	f002 fed8 	bl	8003d48 <memset>
  if(hadc->Instance==ADC1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a35      	ldr	r2, [pc, #212]	; (8001074 <HAL_ADC_MspInit+0x104>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d164      	bne.n	800106c <HAL_ADC_MspInit+0xfc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	01d2      	lsls	r2, r2, #7
 8000fa8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	2200      	movs	r2, #0
 8000fae:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f002 fc68 	bl	8003888 <HAL_RCCEx_PeriphCLKConfig>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000fbc:	f7ff ffaa 	bl	8000f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <HAL_ADC_MspInit+0x108>)
 8000fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <HAL_ADC_MspInit+0x108>)
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	0349      	lsls	r1, r1, #13
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	641a      	str	r2, [r3, #64]	; 0x40
 8000fce:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <HAL_ADC_MspInit+0x108>)
 8000fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	035b      	lsls	r3, r3, #13
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <HAL_ADC_MspInit+0x108>)
 8000fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <HAL_ADC_MspInit+0x108>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	635a      	str	r2, [r3, #52]	; 0x34
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <HAL_ADC_MspInit+0x108>)
 8000fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fec:	2201      	movs	r2, #1
 8000fee:	4013      	ands	r3, r2
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Anologica_Pin;
 8000ff4:	215c      	movs	r1, #92	; 0x5c
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	2203      	movs	r2, #3
 8001000:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Anologica_GPIO_Port, &GPIO_InitStruct);
 8001008:	187a      	adds	r2, r7, r1
 800100a:	23a0      	movs	r3, #160	; 0xa0
 800100c:	05db      	lsls	r3, r3, #23
 800100e:	0011      	movs	r1, r2
 8001010:	0018      	movs	r0, r3
 8001012:	f001 fd41 	bl	8002a98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_ADC_MspInit+0x10c>)
 8001018:	4a19      	ldr	r2, [pc, #100]	; (8001080 <HAL_ADC_MspInit+0x110>)
 800101a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_ADC_MspInit+0x10c>)
 800101e:	2205      	movs	r2, #5
 8001020:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_ADC_MspInit+0x10c>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_ADC_MspInit+0x10c>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_ADC_MspInit+0x10c>)
 8001030:	2280      	movs	r2, #128	; 0x80
 8001032:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_ADC_MspInit+0x10c>)
 8001036:	2280      	movs	r2, #128	; 0x80
 8001038:	0092      	lsls	r2, r2, #2
 800103a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_ADC_MspInit+0x10c>)
 800103e:	2280      	movs	r2, #128	; 0x80
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HAL_ADC_MspInit+0x10c>)
 8001046:	2220      	movs	r2, #32
 8001048:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_ADC_MspInit+0x10c>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_ADC_MspInit+0x10c>)
 8001052:	0018      	movs	r0, r3
 8001054:	f001 f9a2 	bl	800239c <HAL_DMA_Init>
 8001058:	1e03      	subs	r3, r0, #0
 800105a:	d001      	beq.n	8001060 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 800105c:	f7ff ff5a 	bl	8000f14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a06      	ldr	r2, [pc, #24]	; (800107c <HAL_ADC_MspInit+0x10c>)
 8001064:	651a      	str	r2, [r3, #80]	; 0x50
 8001066:	4b05      	ldr	r3, [pc, #20]	; (800107c <HAL_ADC_MspInit+0x10c>)
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b01d      	add	sp, #116	; 0x74
 8001072:	bd90      	pop	{r4, r7, pc}
 8001074:	40012400 	.word	0x40012400
 8001078:	40021000 	.word	0x40021000
 800107c:	2000015c 	.word	0x2000015c
 8001080:	40020008 	.word	0x40020008

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <NMI_Handler+0x4>

0800108a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <HardFault_Handler+0x4>

08001090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a8:	f000 f8b4 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	019b      	lsls	r3, r3, #6
 80010ba:	0018      	movs	r0, r3
 80010bc:	f001 fe76 	bl	8002dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <DMA1_Channel1_IRQHandler+0x14>)
 80010ce:	0018      	movs	r0, r3
 80010d0:	f001 fb74 	bl	80027bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	2000015c 	.word	0x2000015c

080010e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010f0:	f7ff fff6 	bl	80010e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <LoopForever+0x6>)
  ldr r1, =_edata
 80010f6:	490d      	ldr	r1, [pc, #52]	; (800112c <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <LoopForever+0xe>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <LoopForever+0x12>)
  ldr r4, =_ebss
 800110c:	4c0a      	ldr	r4, [pc, #40]	; (8001138 <LoopForever+0x16>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800111a:	f002 fdf1 	bl	8003d00 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800111e:	f7ff fbb5 	bl	800088c <main>

08001122 <LoopForever>:

LoopForever:
  b LoopForever
 8001122:	e7fe      	b.n	8001122 <LoopForever>
  ldr   r0, =_estack
 8001124:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001130:	08003df8 	.word	0x08003df8
  ldr r2, =_sbss
 8001134:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001138:	200001c4 	.word	0x200001c4

0800113c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC1_COMP_IRQHandler>
	...

08001140 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_Init+0x3c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_Init+0x3c>)
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	0049      	lsls	r1, r1, #1
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800115a:	2003      	movs	r0, #3
 800115c:	f000 f810 	bl	8001180 <HAL_InitTick>
 8001160:	1e03      	subs	r3, r0, #0
 8001162:	d003      	beq.n	800116c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001164:	1dfb      	adds	r3, r7, #7
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	e001      	b.n	8001170 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800116c:	f7ff fed8 	bl	8000f20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001170:	1dfb      	adds	r3, r7, #7
 8001172:	781b      	ldrb	r3, [r3, #0]
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b002      	add	sp, #8
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40022000 	.word	0x40022000

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001188:	230f      	movs	r3, #15
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HAL_InitTick+0x88>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d02b      	beq.n	80011f0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_InitTick+0x8c>)
 800119a:	681c      	ldr	r4, [r3, #0]
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <HAL_InitTick+0x88>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	0019      	movs	r1, r3
 80011a2:	23fa      	movs	r3, #250	; 0xfa
 80011a4:	0098      	lsls	r0, r3, #2
 80011a6:	f7fe ffad 	bl	8000104 <__udivsi3>
 80011aa:	0003      	movs	r3, r0
 80011ac:	0019      	movs	r1, r3
 80011ae:	0020      	movs	r0, r4
 80011b0:	f7fe ffa8 	bl	8000104 <__udivsi3>
 80011b4:	0003      	movs	r3, r0
 80011b6:	0018      	movs	r0, r3
 80011b8:	f001 f8e3 	bl	8002382 <HAL_SYSTICK_Config>
 80011bc:	1e03      	subs	r3, r0, #0
 80011be:	d112      	bne.n	80011e6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d80a      	bhi.n	80011dc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	2301      	movs	r3, #1
 80011ca:	425b      	negs	r3, r3
 80011cc:	2200      	movs	r2, #0
 80011ce:	0018      	movs	r0, r3
 80011d0:	f001 f8b2 	bl	8002338 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_InitTick+0x90>)
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e00d      	b.n	80011f8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011dc:	230f      	movs	r3, #15
 80011de:	18fb      	adds	r3, r7, r3
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	e008      	b.n	80011f8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011e6:	230f      	movs	r3, #15
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	e003      	b.n	80011f8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f0:	230f      	movs	r3, #15
 80011f2:	18fb      	adds	r3, r7, r3
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011f8:	230f      	movs	r3, #15
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	781b      	ldrb	r3, [r3, #0]
}
 80011fe:	0018      	movs	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	b005      	add	sp, #20
 8001204:	bd90      	pop	{r4, r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	2000000c 	.word	0x2000000c
 800120c:	20000004 	.word	0x20000004
 8001210:	20000008 	.word	0x20000008

08001214 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_IncTick+0x1c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	001a      	movs	r2, r3
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HAL_IncTick+0x20>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	18d2      	adds	r2, r2, r3
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_IncTick+0x20>)
 8001226:	601a      	str	r2, [r3, #0]
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	2000000c 	.word	0x2000000c
 8001234:	200001c0 	.word	0x200001c0

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b02      	ldr	r3, [pc, #8]	; (8001248 <HAL_GetTick+0x10>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	0018      	movs	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	200001c0 	.word	0x200001c0

0800124c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a06      	ldr	r2, [pc, #24]	; (8001274 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800125a:	4013      	ands	r3, r2
 800125c:	0019      	movs	r1, r3
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	430a      	orrs	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	40010000 	.word	0x40010000
 8001274:	fffff9ff 	.word	0xfffff9ff

08001278 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001288:	401a      	ands	r2, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	431a      	orrs	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	601a      	str	r2, [r3, #0]
}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b002      	add	sp, #8
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	fe3fffff 	.word	0xfe3fffff

080012a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	23e0      	movs	r3, #224	; 0xe0
 80012ae:	045b      	lsls	r3, r3, #17
 80012b0:	4013      	ands	r3, r2
}
 80012b2:	0018      	movs	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}

080012ba <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b084      	sub	sp, #16
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	2104      	movs	r1, #4
 80012ce:	400a      	ands	r2, r1
 80012d0:	2107      	movs	r1, #7
 80012d2:	4091      	lsls	r1, r2
 80012d4:	000a      	movs	r2, r1
 80012d6:	43d2      	mvns	r2, r2
 80012d8:	401a      	ands	r2, r3
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	2104      	movs	r1, #4
 80012de:	400b      	ands	r3, r1
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	4099      	lsls	r1, r3
 80012e4:	000b      	movs	r3, r1
 80012e6:	431a      	orrs	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b004      	add	sp, #16
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	23c0      	movs	r3, #192	; 0xc0
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	4013      	ands	r3, r2
 8001306:	d101      	bne.n	800130c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800130c:	2300      	movs	r3, #0
}
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	b002      	add	sp, #8
 8001314:	bd80      	pop	{r7, pc}

08001316 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	211f      	movs	r1, #31
 800132a:	400a      	ands	r2, r1
 800132c:	210f      	movs	r1, #15
 800132e:	4091      	lsls	r1, r2
 8001330:	000a      	movs	r2, r1
 8001332:	43d2      	mvns	r2, r2
 8001334:	401a      	ands	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	0e9b      	lsrs	r3, r3, #26
 800133a:	210f      	movs	r1, #15
 800133c:	4019      	ands	r1, r3
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	201f      	movs	r0, #31
 8001342:	4003      	ands	r3, r0
 8001344:	4099      	lsls	r1, r3
 8001346:	000b      	movs	r3, r1
 8001348:	431a      	orrs	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b004      	add	sp, #16
 8001354:	bd80      	pop	{r7, pc}

08001356 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	035b      	lsls	r3, r3, #13
 8001368:	0b5b      	lsrs	r3, r3, #13
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}

08001378 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	0352      	lsls	r2, r2, #13
 800138a:	0b52      	lsrs	r2, r2, #13
 800138c:	43d2      	mvns	r2, r2
 800138e:	401a      	ands	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b002      	add	sp, #8
 800139a:	bd80      	pop	{r7, pc}

0800139c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	0212      	lsls	r2, r2, #8
 80013b0:	43d2      	mvns	r2, r2
 80013b2:	401a      	ands	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	400b      	ands	r3, r1
 80013bc:	4904      	ldr	r1, [pc, #16]	; (80013d0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80013be:	400b      	ands	r3, r1
 80013c0:	431a      	orrs	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b004      	add	sp, #16
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	07ffff00 	.word	0x07ffff00

080013d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <LL_ADC_EnableInternalRegulator+0x24>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	0552      	lsls	r2, r2, #21
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	6fffffe8 	.word	0x6fffffe8

080013fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	055b      	lsls	r3, r3, #21
 800140c:	401a      	ands	r2, r3
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	055b      	lsls	r3, r3, #21
 8001412:	429a      	cmp	r2, r3
 8001414:	d101      	bne.n	800141a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800141a:	2300      	movs	r3, #0
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}

08001424 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <LL_ADC_Enable+0x20>)
 8001432:	4013      	ands	r3, r2
 8001434:	2201      	movs	r2, #1
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800143c:	46c0      	nop			; (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	b002      	add	sp, #8
 8001442:	bd80      	pop	{r7, pc}
 8001444:	7fffffe8 	.word	0x7fffffe8

08001448 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <LL_ADC_Disable+0x20>)
 8001456:	4013      	ands	r3, r2
 8001458:	2202      	movs	r2, #2
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b002      	add	sp, #8
 8001466:	bd80      	pop	{r7, pc}
 8001468:	7fffffe8 	.word	0x7fffffe8

0800146c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2201      	movs	r2, #1
 800147a:	4013      	ands	r3, r2
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <LL_ADC_IsEnabled+0x18>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <LL_ADC_IsEnabled+0x1a>
 8001484:	2300      	movs	r3, #0
}
 8001486:	0018      	movs	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	b002      	add	sp, #8
 800148c:	bd80      	pop	{r7, pc}

0800148e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2202      	movs	r2, #2
 800149c:	4013      	ands	r3, r2
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d101      	bne.n	80014a6 <LL_ADC_IsDisableOngoing+0x18>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <LL_ADC_IsDisableOngoing+0x1a>
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <LL_ADC_REG_StartConversion+0x20>)
 80014be:	4013      	ands	r3, r2
 80014c0:	2204      	movs	r2, #4
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	7fffffe8 	.word	0x7fffffe8

080014d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2204      	movs	r2, #4
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d101      	bne.n	80014ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001500:	231f      	movs	r3, #31
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001510:	2300      	movs	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e1b1      	b.n	8001882 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10a      	bne.n	800153c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	0018      	movs	r0, r3
 800152a:	f7ff fd21 	bl	8000f70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2254      	movs	r2, #84	; 0x54
 8001538:	2100      	movs	r1, #0
 800153a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff ff5b 	bl	80013fc <LL_ADC_IsInternalRegulatorEnabled>
 8001546:	1e03      	subs	r3, r0, #0
 8001548:	d115      	bne.n	8001576 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	0018      	movs	r0, r3
 8001550:	f7ff ff40 	bl	80013d4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001554:	4bcd      	ldr	r3, [pc, #820]	; (800188c <HAL_ADC_Init+0x394>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	49cd      	ldr	r1, [pc, #820]	; (8001890 <HAL_ADC_Init+0x398>)
 800155a:	0018      	movs	r0, r3
 800155c:	f7fe fdd2 	bl	8000104 <__udivsi3>
 8001560:	0003      	movs	r3, r0
 8001562:	3301      	adds	r3, #1
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001568:	e002      	b.n	8001570 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3b01      	subs	r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f9      	bne.n	800156a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0018      	movs	r0, r3
 800157c:	f7ff ff3e 	bl	80013fc <LL_ADC_IsInternalRegulatorEnabled>
 8001580:	1e03      	subs	r3, r0, #0
 8001582:	d10f      	bne.n	80015a4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001588:	2210      	movs	r2, #16
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001594:	2201      	movs	r2, #1
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800159c:	231f      	movs	r3, #31
 800159e:	18fb      	adds	r3, r7, r3
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7ff ff93 	bl	80014d4 <LL_ADC_REG_IsConversionOngoing>
 80015ae:	0003      	movs	r3, r0
 80015b0:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	2210      	movs	r2, #16
 80015b8:	4013      	ands	r3, r2
 80015ba:	d000      	beq.n	80015be <HAL_ADC_Init+0xc6>
 80015bc:	e154      	b.n	8001868 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d000      	beq.n	80015c6 <HAL_ADC_Init+0xce>
 80015c4:	e150      	b.n	8001868 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	4ab2      	ldr	r2, [pc, #712]	; (8001894 <HAL_ADC_Init+0x39c>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	2202      	movs	r2, #2
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	0018      	movs	r0, r3
 80015dc:	f7ff ff46 	bl	800146c <LL_ADC_IsEnabled>
 80015e0:	1e03      	subs	r3, r0, #0
 80015e2:	d156      	bne.n	8001692 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2218      	movs	r2, #24
 80015ec:	4393      	bics	r3, r2
 80015ee:	0019      	movs	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	0f9b      	lsrs	r3, r3, #30
 8001602:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001608:	4313      	orrs	r3, r2
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	4313      	orrs	r3, r2
 800160e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	223c      	movs	r2, #60	; 0x3c
 8001614:	5c9b      	ldrb	r3, [r3, r2]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d111      	bne.n	800163e <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	0f9b      	lsrs	r3, r3, #30
 8001620:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001626:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800162c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001632:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	4313      	orrs	r3, r2
 8001638:	2201      	movs	r2, #1
 800163a:	4313      	orrs	r3, r2
 800163c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	4a94      	ldr	r2, [pc, #592]	; (8001898 <HAL_ADC_Init+0x3a0>)
 8001646:	4013      	ands	r3, r2
 8001648:	0019      	movs	r1, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	430a      	orrs	r2, r1
 8001652:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	23c0      	movs	r3, #192	; 0xc0
 800165a:	061b      	lsls	r3, r3, #24
 800165c:	429a      	cmp	r2, r3
 800165e:	d018      	beq.n	8001692 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	05db      	lsls	r3, r3, #23
 8001668:	429a      	cmp	r2, r3
 800166a:	d012      	beq.n	8001692 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	061b      	lsls	r3, r3, #24
 8001674:	429a      	cmp	r2, r3
 8001676:	d00c      	beq.n	8001692 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001678:	4b88      	ldr	r3, [pc, #544]	; (800189c <HAL_ADC_Init+0x3a4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a88      	ldr	r2, [pc, #544]	; (80018a0 <HAL_ADC_Init+0x3a8>)
 800167e:	4013      	ands	r3, r2
 8001680:	0019      	movs	r1, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	23f0      	movs	r3, #240	; 0xf0
 8001688:	039b      	lsls	r3, r3, #14
 800168a:	401a      	ands	r2, r3
 800168c:	4b83      	ldr	r3, [pc, #524]	; (800189c <HAL_ADC_Init+0x3a4>)
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7e1b      	ldrb	r3, [r3, #24]
 8001696:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7e5b      	ldrb	r3, [r3, #25]
 800169c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800169e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7e9b      	ldrb	r3, [r3, #26]
 80016a4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80016a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d002      	beq.n	80016b6 <HAL_ADC_Init+0x1be>
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	015b      	lsls	r3, r3, #5
 80016b4:	e000      	b.n	80016b8 <HAL_ADC_Init+0x1c0>
 80016b6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80016b8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80016be:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	da04      	bge.n	80016d2 <HAL_ADC_Init+0x1da>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	085b      	lsrs	r3, r3, #1
 80016d0:	e001      	b.n	80016d6 <HAL_ADC_Init+0x1de>
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80016d6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	212c      	movs	r1, #44	; 0x2c
 80016dc:	5c5b      	ldrb	r3, [r3, r1]
 80016de:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80016e0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2220      	movs	r2, #32
 80016ec:	5c9b      	ldrb	r3, [r3, r2]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d115      	bne.n	800171e <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7e9b      	ldrb	r3, [r3, #26]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d105      	bne.n	8001706 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2280      	movs	r2, #128	; 0x80
 80016fe:	0252      	lsls	r2, r2, #9
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
 8001704:	e00b      	b.n	800171e <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	2220      	movs	r2, #32
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001716:	2201      	movs	r2, #1
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00a      	beq.n	800173c <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800172a:	23e0      	movs	r3, #224	; 0xe0
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001734:	4313      	orrs	r3, r2
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	4a58      	ldr	r2, [pc, #352]	; (80018a4 <HAL_ADC_Init+0x3ac>)
 8001744:	4013      	ands	r3, r2
 8001746:	0019      	movs	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	430a      	orrs	r2, r1
 8001750:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	4a53      	ldr	r2, [pc, #332]	; (80018a8 <HAL_ADC_Init+0x3b0>)
 800175a:	4013      	ands	r3, r2
 800175c:	0019      	movs	r1, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	430a      	orrs	r2, r1
 8001766:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001770:	001a      	movs	r2, r3
 8001772:	2100      	movs	r1, #0
 8001774:	f7ff fda1 	bl	80012ba <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001780:	494a      	ldr	r1, [pc, #296]	; (80018ac <HAL_ADC_Init+0x3b4>)
 8001782:	001a      	movs	r2, r3
 8001784:	f7ff fd99 	bl	80012ba <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d109      	bne.n	80017a4 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2110      	movs	r1, #16
 800179c:	4249      	negs	r1, r1
 800179e:	430a      	orrs	r2, r1
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
 80017a2:	e03a      	b.n	800181a <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	039b      	lsls	r3, r3, #14
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d134      	bne.n	800181a <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	e00c      	b.n	80017d0 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	40da      	lsrs	r2, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	220f      	movs	r2, #15
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b0f      	cmp	r3, #15
 80017c8:	d006      	beq.n	80017d8 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	3301      	adds	r3, #1
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	2b07      	cmp	r3, #7
 80017d4:	d9ef      	bls.n	80017b6 <HAL_ADC_Init+0x2be>
 80017d6:	e000      	b.n	80017da <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 80017d8:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d109      	bne.n	80017f4 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2110      	movs	r1, #16
 80017ec:	4249      	negs	r1, r1
 80017ee:	430a      	orrs	r2, r1
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
 80017f2:	e012      	b.n	800181a <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	3b01      	subs	r3, #1
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	221c      	movs	r2, #28
 8001804:	4013      	ands	r3, r2
 8001806:	2210      	movs	r2, #16
 8001808:	4252      	negs	r2, r2
 800180a:	409a      	lsls	r2, r3
 800180c:	0011      	movs	r1, r2
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4a23      	ldr	r2, [pc, #140]	; (80018b0 <HAL_ADC_Init+0x3b8>)
 8001822:	4013      	ands	r3, r2
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	429a      	cmp	r2, r3
 8001828:	d10b      	bne.n	8001842 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	2203      	movs	r2, #3
 8001836:	4393      	bics	r3, r2
 8001838:	2201      	movs	r2, #1
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001840:	e01c      	b.n	800187c <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	2212      	movs	r2, #18
 8001848:	4393      	bics	r3, r2
 800184a:	2210      	movs	r2, #16
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001856:	2201      	movs	r2, #1
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800185e:	231f      	movs	r3, #31
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001866:	e009      	b.n	800187c <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186c:	2210      	movs	r2, #16
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001874:	231f      	movs	r3, #31
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800187c:	231f      	movs	r3, #31
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	781b      	ldrb	r3, [r3, #0]
}
 8001882:	0018      	movs	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	b008      	add	sp, #32
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	20000004 	.word	0x20000004
 8001890:	00030d40 	.word	0x00030d40
 8001894:	fffffefd 	.word	0xfffffefd
 8001898:	1ffffc02 	.word	0x1ffffc02
 800189c:	40012708 	.word	0x40012708
 80018a0:	ffc3ffff 	.word	0xffc3ffff
 80018a4:	fffe0219 	.word	0xfffe0219
 80018a8:	dffffc02 	.word	0xdffffc02
 80018ac:	07ffff04 	.word	0x07ffff04
 80018b0:	833fffe7 	.word	0x833fffe7

080018b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80018b4:	b5b0      	push	{r4, r5, r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7ff fe05 	bl	80014d4 <LL_ADC_REG_IsConversionOngoing>
 80018ca:	1e03      	subs	r3, r0, #0
 80018cc:	d16c      	bne.n	80019a8 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2254      	movs	r2, #84	; 0x54
 80018d2:	5c9b      	ldrb	r3, [r3, r2]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_ADC_Start_DMA+0x28>
 80018d8:	2302      	movs	r3, #2
 80018da:	e06c      	b.n	80019b6 <HAL_ADC_Start_DMA+0x102>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2254      	movs	r2, #84	; 0x54
 80018e0:	2101      	movs	r1, #1
 80018e2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2201      	movs	r2, #1
 80018ec:	4013      	ands	r3, r2
 80018ee:	d113      	bne.n	8001918 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff fdb9 	bl	800146c <LL_ADC_IsEnabled>
 80018fa:	1e03      	subs	r3, r0, #0
 80018fc:	d004      	beq.n	8001908 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	0018      	movs	r0, r3
 8001904:	f7ff fda0 	bl	8001448 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2101      	movs	r1, #1
 8001914:	430a      	orrs	r2, r1
 8001916:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001918:	2517      	movs	r5, #23
 800191a:	197c      	adds	r4, r7, r5
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	0018      	movs	r0, r3
 8001920:	f000 fa46 	bl	8001db0 <ADC_Enable>
 8001924:	0003      	movs	r3, r0
 8001926:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001928:	002c      	movs	r4, r5
 800192a:	193b      	adds	r3, r7, r4
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d13e      	bne.n	80019b0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	4a22      	ldr	r2, [pc, #136]	; (80019c0 <HAL_ADC_Start_DMA+0x10c>)
 8001938:	4013      	ands	r3, r2
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	0052      	lsls	r2, r2, #1
 800193e:	431a      	orrs	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800194e:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <HAL_ADC_Start_DMA+0x110>)
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001956:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <HAL_ADC_Start_DMA+0x114>)
 8001958:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800195e:	4a1b      	ldr	r2, [pc, #108]	; (80019cc <HAL_ADC_Start_DMA+0x118>)
 8001960:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	221c      	movs	r2, #28
 8001968:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2254      	movs	r2, #84	; 0x54
 800196e:	2100      	movs	r1, #0
 8001970:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2110      	movs	r1, #16
 800197e:	430a      	orrs	r2, r1
 8001980:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3340      	adds	r3, #64	; 0x40
 800198c:	0019      	movs	r1, r3
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	193c      	adds	r4, r7, r4
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f000 fdae 	bl	80024f4 <HAL_DMA_Start_IT>
 8001998:	0003      	movs	r3, r0
 800199a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	0018      	movs	r0, r3
 80019a2:	f7ff fd85 	bl	80014b0 <LL_ADC_REG_StartConversion>
 80019a6:	e003      	b.n	80019b0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019a8:	2317      	movs	r3, #23
 80019aa:	18fb      	adds	r3, r7, r3
 80019ac:	2202      	movs	r2, #2
 80019ae:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80019b0:	2317      	movs	r3, #23
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	781b      	ldrb	r3, [r3, #0]
}
 80019b6:	0018      	movs	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b006      	add	sp, #24
 80019bc:	bdb0      	pop	{r4, r5, r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	fffff0fe 	.word	0xfffff0fe
 80019c4:	08001f79 	.word	0x08001f79
 80019c8:	08002041 	.word	0x08002041
 80019cc:	0800205f 	.word	0x0800205f

080019d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019e8:	46c0      	nop			; (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b002      	add	sp, #8
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b002      	add	sp, #8
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a0a:	2317      	movs	r3, #23
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2254      	movs	r2, #84	; 0x54
 8001a1a:	5c9b      	ldrb	r3, [r3, r2]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x24>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e1c0      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x3a6>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2254      	movs	r2, #84	; 0x54
 8001a28:	2101      	movs	r1, #1
 8001a2a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7ff fd4f 	bl	80014d4 <LL_ADC_REG_IsConversionOngoing>
 8001a36:	1e03      	subs	r3, r0, #0
 8001a38:	d000      	beq.n	8001a3c <HAL_ADC_ConfigChannel+0x3c>
 8001a3a:	e1a3      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d100      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x46>
 8001a44:	e143      	b.n	8001cce <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691a      	ldr	r2, [r3, #16]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	061b      	lsls	r3, r3, #24
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d004      	beq.n	8001a5c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a56:	4ac1      	ldr	r2, [pc, #772]	; (8001d5c <HAL_ADC_ConfigChannel+0x35c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d108      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0019      	movs	r1, r3
 8001a66:	0010      	movs	r0, r2
 8001a68:	f7ff fc75 	bl	8001356 <LL_ADC_REG_SetSequencerChAdd>
 8001a6c:	e0c9      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	211f      	movs	r1, #31
 8001a78:	400b      	ands	r3, r1
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	4099      	lsls	r1, r3
 8001a7e:	000b      	movs	r3, r1
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4013      	ands	r3, r2
 8001a84:	0019      	movs	r1, r3
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	035b      	lsls	r3, r3, #13
 8001a8c:	0b5b      	lsrs	r3, r3, #13
 8001a8e:	d105      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x9c>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0e9b      	lsrs	r3, r3, #26
 8001a96:	221f      	movs	r2, #31
 8001a98:	4013      	ands	r3, r2
 8001a9a:	e098      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d000      	beq.n	8001aa8 <HAL_ADC_ConfigChannel+0xa8>
 8001aa6:	e091      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x1cc>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2202      	movs	r2, #2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d000      	beq.n	8001ab4 <HAL_ADC_ConfigChannel+0xb4>
 8001ab2:	e089      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x1c8>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2204      	movs	r2, #4
 8001aba:	4013      	ands	r3, r2
 8001abc:	d000      	beq.n	8001ac0 <HAL_ADC_ConfigChannel+0xc0>
 8001abe:	e081      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x1c4>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d000      	beq.n	8001acc <HAL_ADC_ConfigChannel+0xcc>
 8001aca:	e079      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x1c0>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2210      	movs	r2, #16
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d000      	beq.n	8001ad8 <HAL_ADC_ConfigChannel+0xd8>
 8001ad6:	e071      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x1bc>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2220      	movs	r2, #32
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d000      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0xe4>
 8001ae2:	e069      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x1b8>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2240      	movs	r2, #64	; 0x40
 8001aea:	4013      	ands	r3, r2
 8001aec:	d000      	beq.n	8001af0 <HAL_ADC_ConfigChannel+0xf0>
 8001aee:	e061      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x1b4>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2280      	movs	r2, #128	; 0x80
 8001af6:	4013      	ands	r3, r2
 8001af8:	d000      	beq.n	8001afc <HAL_ADC_ConfigChannel+0xfc>
 8001afa:	e059      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x1b0>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4013      	ands	r3, r2
 8001b06:	d151      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x1ac>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	d149      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x1a8>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d141      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1a4>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d139      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x1a0>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	015b      	lsls	r3, r3, #5
 8001b34:	4013      	ands	r3, r2
 8001b36:	d131      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x19c>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	019b      	lsls	r3, r3, #6
 8001b40:	4013      	ands	r3, r2
 8001b42:	d129      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x198>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	01db      	lsls	r3, r3, #7
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d121      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x194>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d119      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x190>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	025b      	lsls	r3, r3, #9
 8001b64:	4013      	ands	r3, r2
 8001b66:	d111      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x18c>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	029b      	lsls	r3, r3, #10
 8001b70:	4013      	ands	r3, r2
 8001b72:	d109      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x188>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	02db      	lsls	r3, r3, #11
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d001      	beq.n	8001b84 <HAL_ADC_ConfigChannel+0x184>
 8001b80:	2312      	movs	r3, #18
 8001b82:	e024      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001b84:	2300      	movs	r3, #0
 8001b86:	e022      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001b88:	2311      	movs	r3, #17
 8001b8a:	e020      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001b8c:	2310      	movs	r3, #16
 8001b8e:	e01e      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001b90:	230f      	movs	r3, #15
 8001b92:	e01c      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001b94:	230e      	movs	r3, #14
 8001b96:	e01a      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001b98:	230d      	movs	r3, #13
 8001b9a:	e018      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001b9c:	230c      	movs	r3, #12
 8001b9e:	e016      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001ba0:	230b      	movs	r3, #11
 8001ba2:	e014      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001ba4:	230a      	movs	r3, #10
 8001ba6:	e012      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001ba8:	2309      	movs	r3, #9
 8001baa:	e010      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bac:	2308      	movs	r3, #8
 8001bae:	e00e      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	e00c      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bb4:	2306      	movs	r3, #6
 8001bb6:	e00a      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bb8:	2305      	movs	r3, #5
 8001bba:	e008      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	e006      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e004      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e002      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	6852      	ldr	r2, [r2, #4]
 8001bd2:	201f      	movs	r0, #31
 8001bd4:	4002      	ands	r2, r0
 8001bd6:	4093      	lsls	r3, r2
 8001bd8:	000a      	movs	r2, r1
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d808      	bhi.n	8001c02 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	001a      	movs	r2, r3
 8001bfe:	f7ff fb8a 	bl	8001316 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	6819      	ldr	r1, [r3, #0]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	001a      	movs	r2, r3
 8001c10:	f7ff fbc4 	bl	800139c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	db00      	blt.n	8001c1e <HAL_ADC_ConfigChannel+0x21e>
 8001c1c:	e0bc      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c1e:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <HAL_ADC_ConfigChannel+0x360>)
 8001c20:	0018      	movs	r0, r3
 8001c22:	f7ff fb3d 	bl	80012a0 <LL_ADC_GetCommonPathInternalCh>
 8001c26:	0003      	movs	r3, r0
 8001c28:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a4d      	ldr	r2, [pc, #308]	; (8001d64 <HAL_ADC_ConfigChannel+0x364>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d122      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	041b      	lsls	r3, r3, #16
 8001c3a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c3c:	d11d      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2280      	movs	r2, #128	; 0x80
 8001c42:	0412      	lsls	r2, r2, #16
 8001c44:	4313      	orrs	r3, r2
 8001c46:	4a46      	ldr	r2, [pc, #280]	; (8001d60 <HAL_ADC_ConfigChannel+0x360>)
 8001c48:	0019      	movs	r1, r3
 8001c4a:	0010      	movs	r0, r2
 8001c4c:	f7ff fb14 	bl	8001278 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c50:	4b45      	ldr	r3, [pc, #276]	; (8001d68 <HAL_ADC_ConfigChannel+0x368>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4945      	ldr	r1, [pc, #276]	; (8001d6c <HAL_ADC_ConfigChannel+0x36c>)
 8001c56:	0018      	movs	r0, r3
 8001c58:	f7fe fa54 	bl	8000104 <__udivsi3>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	0013      	movs	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	189b      	adds	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c6a:	e002      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f9      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c78:	e08e      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a3c      	ldr	r2, [pc, #240]	; (8001d70 <HAL_ADC_ConfigChannel+0x370>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d10e      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x2a2>
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	045b      	lsls	r3, r3, #17
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d109      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	0452      	lsls	r2, r2, #17
 8001c94:	4313      	orrs	r3, r2
 8001c96:	4a32      	ldr	r2, [pc, #200]	; (8001d60 <HAL_ADC_ConfigChannel+0x360>)
 8001c98:	0019      	movs	r1, r3
 8001c9a:	0010      	movs	r0, r2
 8001c9c:	f7ff faec 	bl	8001278 <LL_ADC_SetCommonPathInternalCh>
 8001ca0:	e07a      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a33      	ldr	r2, [pc, #204]	; (8001d74 <HAL_ADC_ConfigChannel+0x374>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d000      	beq.n	8001cae <HAL_ADC_ConfigChannel+0x2ae>
 8001cac:	e074      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	03db      	lsls	r3, r3, #15
 8001cb4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cb6:	d000      	beq.n	8001cba <HAL_ADC_ConfigChannel+0x2ba>
 8001cb8:	e06e      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	03d2      	lsls	r2, r2, #15
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	4a27      	ldr	r2, [pc, #156]	; (8001d60 <HAL_ADC_ConfigChannel+0x360>)
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	0010      	movs	r0, r2
 8001cc8:	f7ff fad6 	bl	8001278 <LL_ADC_SetCommonPathInternalCh>
 8001ccc:	e064      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	061b      	lsls	r3, r3, #24
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d004      	beq.n	8001ce4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cde:	4a1f      	ldr	r2, [pc, #124]	; (8001d5c <HAL_ADC_ConfigChannel+0x35c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d107      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0019      	movs	r1, r3
 8001cee:	0010      	movs	r0, r2
 8001cf0:	f7ff fb42 	bl	8001378 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	da4d      	bge.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cfc:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_ADC_ConfigChannel+0x360>)
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f7ff face 	bl	80012a0 <LL_ADC_GetCommonPathInternalCh>
 8001d04:	0003      	movs	r3, r0
 8001d06:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a15      	ldr	r2, [pc, #84]	; (8001d64 <HAL_ADC_ConfigChannel+0x364>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d108      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4a18      	ldr	r2, [pc, #96]	; (8001d78 <HAL_ADC_ConfigChannel+0x378>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <HAL_ADC_ConfigChannel+0x360>)
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	0010      	movs	r0, r2
 8001d1e:	f7ff faab 	bl	8001278 <LL_ADC_SetCommonPathInternalCh>
 8001d22:	e039      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a11      	ldr	r2, [pc, #68]	; (8001d70 <HAL_ADC_ConfigChannel+0x370>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d108      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <HAL_ADC_ConfigChannel+0x37c>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <HAL_ADC_ConfigChannel+0x360>)
 8001d36:	0019      	movs	r1, r3
 8001d38:	0010      	movs	r0, r2
 8001d3a:	f7ff fa9d 	bl	8001278 <LL_ADC_SetCommonPathInternalCh>
 8001d3e:	e02b      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <HAL_ADC_ConfigChannel+0x374>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d126      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <HAL_ADC_ConfigChannel+0x380>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	4a03      	ldr	r2, [pc, #12]	; (8001d60 <HAL_ADC_ConfigChannel+0x360>)
 8001d52:	0019      	movs	r1, r3
 8001d54:	0010      	movs	r0, r2
 8001d56:	f7ff fa8f 	bl	8001278 <LL_ADC_SetCommonPathInternalCh>
 8001d5a:	e01d      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
 8001d5c:	80000004 	.word	0x80000004
 8001d60:	40012708 	.word	0x40012708
 8001d64:	b0001000 	.word	0xb0001000
 8001d68:	20000004 	.word	0x20000004
 8001d6c:	00030d40 	.word	0x00030d40
 8001d70:	b8004000 	.word	0xb8004000
 8001d74:	b4002000 	.word	0xb4002000
 8001d78:	ff7fffff 	.word	0xff7fffff
 8001d7c:	feffffff 	.word	0xfeffffff
 8001d80:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	2220      	movs	r2, #32
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d90:	2317      	movs	r3, #23
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2254      	movs	r2, #84	; 0x54
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001da0:	2317      	movs	r3, #23
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	781b      	ldrb	r3, [r3, #0]
}
 8001da6:	0018      	movs	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b006      	add	sp, #24
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	46c0      	nop			; (mov r8, r8)

08001db0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f7ff fb53 	bl	800146c <LL_ADC_IsEnabled>
 8001dc6:	1e03      	subs	r3, r0, #0
 8001dc8:	d000      	beq.n	8001dcc <ADC_Enable+0x1c>
 8001dca:	e069      	b.n	8001ea0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	4a36      	ldr	r2, [pc, #216]	; (8001eac <ADC_Enable+0xfc>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d00d      	beq.n	8001df4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	2210      	movs	r2, #16
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	2201      	movs	r2, #1
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e056      	b.n	8001ea2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff fb13 	bl	8001424 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <ADC_Enable+0x100>)
 8001e00:	0018      	movs	r0, r3
 8001e02:	f7ff fa4d 	bl	80012a0 <LL_ADC_GetCommonPathInternalCh>
 8001e06:	0002      	movs	r2, r0
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	041b      	lsls	r3, r3, #16
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d00f      	beq.n	8001e30 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e10:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <ADC_Enable+0x104>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4928      	ldr	r1, [pc, #160]	; (8001eb8 <ADC_Enable+0x108>)
 8001e16:	0018      	movs	r0, r3
 8001e18:	f7fe f974 	bl	8000104 <__udivsi3>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	3301      	adds	r3, #1
 8001e20:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e22:	e002      	b.n	8001e2a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f9      	bne.n	8001e24 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7e5b      	ldrb	r3, [r3, #25]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d033      	beq.n	8001ea0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001e38:	f7ff f9fe 	bl	8001238 <HAL_GetTick>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e40:	e027      	b.n	8001e92 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	0018      	movs	r0, r3
 8001e48:	f7ff fb10 	bl	800146c <LL_ADC_IsEnabled>
 8001e4c:	1e03      	subs	r3, r0, #0
 8001e4e:	d104      	bne.n	8001e5a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0018      	movs	r0, r3
 8001e56:	f7ff fae5 	bl	8001424 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e5a:	f7ff f9ed 	bl	8001238 <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d914      	bls.n	8001e92 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d00d      	beq.n	8001e92 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	2210      	movs	r2, #16
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	2201      	movs	r2, #1
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e007      	b.n	8001ea2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d1d0      	bne.n	8001e42 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b004      	add	sp, #16
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	80000017 	.word	0x80000017
 8001eb0:	40012708 	.word	0x40012708
 8001eb4:	20000004 	.word	0x20000004
 8001eb8:	00030d40 	.word	0x00030d40

08001ebc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff fae0 	bl	800148e <LL_ADC_IsDisableOngoing>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7ff fac8 	bl	800146c <LL_ADC_IsEnabled>
 8001edc:	1e03      	subs	r3, r0, #0
 8001ede:	d046      	beq.n	8001f6e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d143      	bne.n	8001f6e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2205      	movs	r2, #5
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d10d      	bne.n	8001f10 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7ff faa5 	bl	8001448 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2203      	movs	r2, #3
 8001f04:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f06:	f7ff f997 	bl	8001238 <HAL_GetTick>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f0e:	e028      	b.n	8001f62 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	2210      	movs	r2, #16
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	2201      	movs	r2, #1
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e021      	b.n	8001f70 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f2c:	f7ff f984 	bl	8001238 <HAL_GetTick>
 8001f30:	0002      	movs	r2, r0
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d913      	bls.n	8001f62 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2201      	movs	r2, #1
 8001f42:	4013      	ands	r3, r2
 8001f44:	d00d      	beq.n	8001f62 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	2210      	movs	r2, #16
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	2201      	movs	r2, #1
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e006      	b.n	8001f70 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d1de      	bne.n	8001f2c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b004      	add	sp, #16
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	2250      	movs	r2, #80	; 0x50
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d141      	bne.n	8002014 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	2280      	movs	r2, #128	; 0x80
 8001f96:	0092      	lsls	r2, r2, #2
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f7ff f9a6 	bl	80012f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fa8:	1e03      	subs	r3, r0, #0
 8001faa:	d02e      	beq.n	800200a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	7e9b      	ldrb	r3, [r3, #26]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d12a      	bne.n	800200a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2208      	movs	r2, #8
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d123      	bne.n	800200a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f7ff fa84 	bl	80014d4 <LL_ADC_REG_IsConversionOngoing>
 8001fcc:	1e03      	subs	r3, r0, #0
 8001fce:	d110      	bne.n	8001ff2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	210c      	movs	r1, #12
 8001fdc:	438a      	bics	r2, r1
 8001fde:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	4a15      	ldr	r2, [pc, #84]	; (800203c <ADC_DMAConvCplt+0xc4>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2201      	movs	r2, #1
 8001fea:	431a      	orrs	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	659a      	str	r2, [r3, #88]	; 0x58
 8001ff0:	e00b      	b.n	800200a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	2201      	movs	r2, #1
 8002004:	431a      	orrs	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	0018      	movs	r0, r3
 800200e:	f7ff fcdf 	bl	80019d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002012:	e00f      	b.n	8002034 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	2210      	movs	r2, #16
 800201a:	4013      	ands	r3, r2
 800201c:	d004      	beq.n	8002028 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	0018      	movs	r0, r3
 8002022:	f7ff fce5 	bl	80019f0 <HAL_ADC_ErrorCallback>
}
 8002026:	e005      	b.n	8002034 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	0010      	movs	r0, r2
 8002032:	4798      	blx	r3
}
 8002034:	46c0      	nop			; (mov r8, r8)
 8002036:	46bd      	mov	sp, r7
 8002038:	b004      	add	sp, #16
 800203a:	bd80      	pop	{r7, pc}
 800203c:	fffffefe 	.word	0xfffffefe

08002040 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0018      	movs	r0, r3
 8002052:	f7ff fcc5 	bl	80019e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bd80      	pop	{r7, pc}

0800205e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	2240      	movs	r2, #64	; 0x40
 8002072:	431a      	orrs	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207c:	2204      	movs	r2, #4
 800207e:	431a      	orrs	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	0018      	movs	r0, r3
 8002088:	f7ff fcb2 	bl	80019f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b004      	add	sp, #16
 8002092:	bd80      	pop	{r7, pc}

08002094 <LL_ADC_IsEnabled>:
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2201      	movs	r2, #1
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <LL_ADC_IsEnabled+0x18>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <LL_ADC_IsEnabled+0x1a>
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	0018      	movs	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b002      	add	sp, #8
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <LL_ADC_IsCalibrationOnGoing>:
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	0fdb      	lsrs	r3, r3, #31
 80020c4:	07da      	lsls	r2, r3, #31
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d101      	bne.n	80020d2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80020dc:	b590      	push	{r4, r7, lr}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2254      	movs	r2, #84	; 0x54
 80020ec:	5c9b      	ldrb	r3, [r3, r2]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_ADCEx_Calibration_Start+0x1a>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e06c      	b.n	80021d0 <HAL_ADCEx_Calibration_Start+0xf4>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2254      	movs	r2, #84	; 0x54
 80020fa:	2101      	movs	r1, #1
 80020fc:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80020fe:	2317      	movs	r3, #23
 8002100:	18fc      	adds	r4, r7, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	0018      	movs	r0, r3
 8002106:	f7ff fed9 	bl	8001ebc <ADC_Disable>
 800210a:	0003      	movs	r3, r0
 800210c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	0018      	movs	r0, r3
 8002114:	f7ff ffbe 	bl	8002094 <LL_ADC_IsEnabled>
 8002118:	1e03      	subs	r3, r0, #0
 800211a:	d14c      	bne.n	80021b6 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	4a2d      	ldr	r2, [pc, #180]	; (80021d8 <HAL_ADCEx_Calibration_Start+0xfc>)
 8002122:	4013      	ands	r3, r2
 8002124:	2202      	movs	r2, #2
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2203      	movs	r2, #3
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2103      	movs	r1, #3
 8002144:	438a      	bics	r2, r1
 8002146:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2180      	movs	r1, #128	; 0x80
 8002154:	0609      	lsls	r1, r1, #24
 8002156:	430a      	orrs	r2, r1
 8002158:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800215a:	e014      	b.n	8002186 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3301      	adds	r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <HAL_ADCEx_Calibration_Start+0x100>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d90d      	bls.n	8002186 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	2212      	movs	r2, #18
 8002170:	4393      	bics	r3, r2
 8002172:	2210      	movs	r2, #16
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2254      	movs	r2, #84	; 0x54
 800217e:	2100      	movs	r1, #0
 8002180:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e024      	b.n	80021d0 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	0018      	movs	r0, r3
 800218c:	f7ff ff93 	bl	80020b6 <LL_ADC_IsCalibrationOnGoing>
 8002190:	1e03      	subs	r3, r0, #0
 8002192:	d1e3      	bne.n	800215c <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68d9      	ldr	r1, [r3, #12]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a8:	2203      	movs	r2, #3
 80021aa:	4393      	bics	r3, r2
 80021ac:	2201      	movs	r2, #1
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	659a      	str	r2, [r3, #88]	; 0x58
 80021b4:	e005      	b.n	80021c2 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	2210      	movs	r2, #16
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2254      	movs	r2, #84	; 0x54
 80021c6:	2100      	movs	r1, #0
 80021c8:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80021ca:	2317      	movs	r3, #23
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	781b      	ldrb	r3, [r3, #0]
}
 80021d0:	0018      	movs	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b007      	add	sp, #28
 80021d6:	bd90      	pop	{r4, r7, pc}
 80021d8:	fffffefd 	.word	0xfffffefd
 80021dc:	0002f1ff 	.word	0x0002f1ff

080021e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	0002      	movs	r2, r0
 80021e8:	1dfb      	adds	r3, r7, #7
 80021ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021ec:	1dfb      	adds	r3, r7, #7
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b7f      	cmp	r3, #127	; 0x7f
 80021f2:	d809      	bhi.n	8002208 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f4:	1dfb      	adds	r3, r7, #7
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	001a      	movs	r2, r3
 80021fa:	231f      	movs	r3, #31
 80021fc:	401a      	ands	r2, r3
 80021fe:	4b04      	ldr	r3, [pc, #16]	; (8002210 <__NVIC_EnableIRQ+0x30>)
 8002200:	2101      	movs	r1, #1
 8002202:	4091      	lsls	r1, r2
 8002204:	000a      	movs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	b002      	add	sp, #8
 800220e:	bd80      	pop	{r7, pc}
 8002210:	e000e100 	.word	0xe000e100

08002214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	0002      	movs	r2, r0
 800221c:	6039      	str	r1, [r7, #0]
 800221e:	1dfb      	adds	r3, r7, #7
 8002220:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002222:	1dfb      	adds	r3, r7, #7
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b7f      	cmp	r3, #127	; 0x7f
 8002228:	d828      	bhi.n	800227c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800222a:	4a2f      	ldr	r2, [pc, #188]	; (80022e8 <__NVIC_SetPriority+0xd4>)
 800222c:	1dfb      	adds	r3, r7, #7
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b25b      	sxtb	r3, r3
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	33c0      	adds	r3, #192	; 0xc0
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	589b      	ldr	r3, [r3, r2]
 800223a:	1dfa      	adds	r2, r7, #7
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	0011      	movs	r1, r2
 8002240:	2203      	movs	r2, #3
 8002242:	400a      	ands	r2, r1
 8002244:	00d2      	lsls	r2, r2, #3
 8002246:	21ff      	movs	r1, #255	; 0xff
 8002248:	4091      	lsls	r1, r2
 800224a:	000a      	movs	r2, r1
 800224c:	43d2      	mvns	r2, r2
 800224e:	401a      	ands	r2, r3
 8002250:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	019b      	lsls	r3, r3, #6
 8002256:	22ff      	movs	r2, #255	; 0xff
 8002258:	401a      	ands	r2, r3
 800225a:	1dfb      	adds	r3, r7, #7
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	0018      	movs	r0, r3
 8002260:	2303      	movs	r3, #3
 8002262:	4003      	ands	r3, r0
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002268:	481f      	ldr	r0, [pc, #124]	; (80022e8 <__NVIC_SetPriority+0xd4>)
 800226a:	1dfb      	adds	r3, r7, #7
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	b25b      	sxtb	r3, r3
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	430a      	orrs	r2, r1
 8002274:	33c0      	adds	r3, #192	; 0xc0
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800227a:	e031      	b.n	80022e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800227c:	4a1b      	ldr	r2, [pc, #108]	; (80022ec <__NVIC_SetPriority+0xd8>)
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	0019      	movs	r1, r3
 8002284:	230f      	movs	r3, #15
 8002286:	400b      	ands	r3, r1
 8002288:	3b08      	subs	r3, #8
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3306      	adds	r3, #6
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	18d3      	adds	r3, r2, r3
 8002292:	3304      	adds	r3, #4
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	1dfa      	adds	r2, r7, #7
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	0011      	movs	r1, r2
 800229c:	2203      	movs	r2, #3
 800229e:	400a      	ands	r2, r1
 80022a0:	00d2      	lsls	r2, r2, #3
 80022a2:	21ff      	movs	r1, #255	; 0xff
 80022a4:	4091      	lsls	r1, r2
 80022a6:	000a      	movs	r2, r1
 80022a8:	43d2      	mvns	r2, r2
 80022aa:	401a      	ands	r2, r3
 80022ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	019b      	lsls	r3, r3, #6
 80022b2:	22ff      	movs	r2, #255	; 0xff
 80022b4:	401a      	ands	r2, r3
 80022b6:	1dfb      	adds	r3, r7, #7
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	0018      	movs	r0, r3
 80022bc:	2303      	movs	r3, #3
 80022be:	4003      	ands	r3, r0
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022c4:	4809      	ldr	r0, [pc, #36]	; (80022ec <__NVIC_SetPriority+0xd8>)
 80022c6:	1dfb      	adds	r3, r7, #7
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	001c      	movs	r4, r3
 80022cc:	230f      	movs	r3, #15
 80022ce:	4023      	ands	r3, r4
 80022d0:	3b08      	subs	r3, #8
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	430a      	orrs	r2, r1
 80022d6:	3306      	adds	r3, #6
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	18c3      	adds	r3, r0, r3
 80022dc:	3304      	adds	r3, #4
 80022de:	601a      	str	r2, [r3, #0]
}
 80022e0:	46c0      	nop			; (mov r8, r8)
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b003      	add	sp, #12
 80022e6:	bd90      	pop	{r4, r7, pc}
 80022e8:	e000e100 	.word	0xe000e100
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	1e5a      	subs	r2, r3, #1
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	045b      	lsls	r3, r3, #17
 8002300:	429a      	cmp	r2, r3
 8002302:	d301      	bcc.n	8002308 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002304:	2301      	movs	r3, #1
 8002306:	e010      	b.n	800232a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <SysTick_Config+0x44>)
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	3a01      	subs	r2, #1
 800230e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002310:	2301      	movs	r3, #1
 8002312:	425b      	negs	r3, r3
 8002314:	2103      	movs	r1, #3
 8002316:	0018      	movs	r0, r3
 8002318:	f7ff ff7c 	bl	8002214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <SysTick_Config+0x44>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002322:	4b04      	ldr	r3, [pc, #16]	; (8002334 <SysTick_Config+0x44>)
 8002324:	2207      	movs	r2, #7
 8002326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002328:	2300      	movs	r3, #0
}
 800232a:	0018      	movs	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	b002      	add	sp, #8
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	e000e010 	.word	0xe000e010

08002338 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	210f      	movs	r1, #15
 8002344:	187b      	adds	r3, r7, r1
 8002346:	1c02      	adds	r2, r0, #0
 8002348:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	187b      	adds	r3, r7, r1
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b25b      	sxtb	r3, r3
 8002352:	0011      	movs	r1, r2
 8002354:	0018      	movs	r0, r3
 8002356:	f7ff ff5d 	bl	8002214 <__NVIC_SetPriority>
}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	46bd      	mov	sp, r7
 800235e:	b004      	add	sp, #16
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	0002      	movs	r2, r0
 800236a:	1dfb      	adds	r3, r7, #7
 800236c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800236e:	1dfb      	adds	r3, r7, #7
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b25b      	sxtb	r3, r3
 8002374:	0018      	movs	r0, r3
 8002376:	f7ff ff33 	bl	80021e0 <__NVIC_EnableIRQ>
}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	46bd      	mov	sp, r7
 800237e:	b002      	add	sp, #8
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0018      	movs	r0, r3
 800238e:	f7ff ffaf 	bl	80022f0 <SysTick_Config>
 8002392:	0003      	movs	r3, r0
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e091      	b.n	80024d2 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	001a      	movs	r2, r3
 80023b4:	4b49      	ldr	r3, [pc, #292]	; (80024dc <HAL_DMA_Init+0x140>)
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d810      	bhi.n	80023dc <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a48      	ldr	r2, [pc, #288]	; (80024e0 <HAL_DMA_Init+0x144>)
 80023c0:	4694      	mov	ip, r2
 80023c2:	4463      	add	r3, ip
 80023c4:	2114      	movs	r1, #20
 80023c6:	0018      	movs	r0, r3
 80023c8:	f7fd fe9c 	bl	8000104 <__udivsi3>
 80023cc:	0003      	movs	r3, r0
 80023ce:	009a      	lsls	r2, r3, #2
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a43      	ldr	r2, [pc, #268]	; (80024e4 <HAL_DMA_Init+0x148>)
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
 80023da:	e00f      	b.n	80023fc <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a41      	ldr	r2, [pc, #260]	; (80024e8 <HAL_DMA_Init+0x14c>)
 80023e2:	4694      	mov	ip, r2
 80023e4:	4463      	add	r3, ip
 80023e6:	2114      	movs	r1, #20
 80023e8:	0018      	movs	r0, r3
 80023ea:	f7fd fe8b 	bl	8000104 <__udivsi3>
 80023ee:	0003      	movs	r3, r0
 80023f0:	009a      	lsls	r2, r3, #2
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a3c      	ldr	r2, [pc, #240]	; (80024ec <HAL_DMA_Init+0x150>)
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2225      	movs	r2, #37	; 0x25
 8002400:	2102      	movs	r1, #2
 8002402:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4938      	ldr	r1, [pc, #224]	; (80024f0 <HAL_DMA_Init+0x154>)
 8002410:	400a      	ands	r2, r1
 8002412:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6819      	ldr	r1, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	0018      	movs	r0, r3
 800244e:	f000 fab5 	bl	80029bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	01db      	lsls	r3, r3, #7
 800245a:	429a      	cmp	r2, r3
 800245c:	d102      	bne.n	8002464 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246c:	217f      	movs	r1, #127	; 0x7f
 800246e:	400a      	ands	r2, r1
 8002470:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800247a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d011      	beq.n	80024a8 <HAL_DMA_Init+0x10c>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d80d      	bhi.n	80024a8 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	0018      	movs	r0, r3
 8002490:	f000 fade 	bl	8002a50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	e008      	b.n	80024ba <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2225      	movs	r2, #37	; 0x25
 80024c4:	2101      	movs	r1, #1
 80024c6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2224      	movs	r2, #36	; 0x24
 80024cc:	2100      	movs	r1, #0
 80024ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	0018      	movs	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b002      	add	sp, #8
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	40020407 	.word	0x40020407
 80024e0:	bffdfff8 	.word	0xbffdfff8
 80024e4:	40020000 	.word	0x40020000
 80024e8:	bffdfbf8 	.word	0xbffdfbf8
 80024ec:	40020400 	.word	0x40020400
 80024f0:	ffff800f 	.word	0xffff800f

080024f4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002502:	2317      	movs	r3, #23
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2224      	movs	r2, #36	; 0x24
 800250e:	5c9b      	ldrb	r3, [r3, r2]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_DMA_Start_IT+0x24>
 8002514:	2302      	movs	r3, #2
 8002516:	e06f      	b.n	80025f8 <HAL_DMA_Start_IT+0x104>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2224      	movs	r2, #36	; 0x24
 800251c:	2101      	movs	r1, #1
 800251e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2225      	movs	r2, #37	; 0x25
 8002524:	5c9b      	ldrb	r3, [r3, r2]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d157      	bne.n	80025dc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2225      	movs	r2, #37	; 0x25
 8002530:	2102      	movs	r1, #2
 8002532:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2101      	movs	r1, #1
 8002546:	438a      	bics	r2, r1
 8002548:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68b9      	ldr	r1, [r7, #8]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f9f7 	bl	8002944 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	210e      	movs	r1, #14
 800256a:	430a      	orrs	r2, r1
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	e00f      	b.n	8002590 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2104      	movs	r1, #4
 800257c:	438a      	bics	r2, r1
 800257e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	210a      	movs	r1, #10
 800258c:	430a      	orrs	r2, r1
 800258e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	025b      	lsls	r3, r3, #9
 800259a:	4013      	ands	r3, r2
 800259c:	d008      	beq.n	80025b0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a8:	2180      	movs	r1, #128	; 0x80
 80025aa:	0049      	lsls	r1, r1, #1
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c2:	2180      	movs	r1, #128	; 0x80
 80025c4:	0049      	lsls	r1, r1, #1
 80025c6:	430a      	orrs	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2101      	movs	r1, #1
 80025d6:	430a      	orrs	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	e00a      	b.n	80025f2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2280      	movs	r2, #128	; 0x80
 80025e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2224      	movs	r2, #36	; 0x24
 80025e6:	2100      	movs	r1, #0
 80025e8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80025ea:	2317      	movs	r3, #23
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80025f2:	2317      	movs	r3, #23
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	781b      	ldrb	r3, [r3, #0]
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b006      	add	sp, #24
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_DMA_PollForTransfer>:
  * @param CompleteLevel Specifies the DMA level complete.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	230b      	movs	r3, #11
 800260c:	18fb      	adds	r3, r7, r3
 800260e:	1c0a      	adds	r2, r1, #0
 8002610:	701a      	strb	r2, [r3, #0]
  uint32_t temp;
  uint32_t tickstart;

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2225      	movs	r2, #37	; 0x25
 8002616:	5c9b      	ldrb	r3, [r3, r2]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d008      	beq.n	8002630 <HAL_DMA_PollForTransfer+0x30>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2204      	movs	r2, #4
 8002622:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2224      	movs	r2, #36	; 0x24
 8002628:	2100      	movs	r1, #0
 800262a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0c0      	b.n	80027b2 <HAL_DMA_PollForTransfer+0x1b2>
  }

  /* Polling mode not supported in circular mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2220      	movs	r2, #32
 8002638:	4013      	ands	r3, r2
 800263a:	d005      	beq.n	8002648 <HAL_DMA_PollForTransfer+0x48>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	0052      	lsls	r2, r2, #1
 8002642:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0b4      	b.n	80027b2 <HAL_DMA_PollForTransfer+0x1b2>
  }

  /* Get the level transfer complete flag */
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8002648:	230b      	movs	r3, #11
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d108      	bne.n	8002664 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	221c      	movs	r2, #28
 8002658:	4013      	ands	r3, r2
 800265a:	2202      	movs	r2, #2
 800265c:	409a      	lsls	r2, r3
 800265e:	0013      	movs	r3, r2
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	e007      	b.n	8002674 <HAL_DMA_PollForTransfer+0x74>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	221c      	movs	r2, #28
 800266a:	4013      	ands	r3, r2
 800266c:	2204      	movs	r2, #4
 800266e:	409a      	lsls	r2, r3
 8002670:	0013      	movs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002674:	f7fe fde0 	bl	8001238 <HAL_GetTick>
 8002678:	0003      	movs	r3, r0
 800267a:	613b      	str	r3, [r7, #16]

#if defined(DMA2)
  while ((hdma->DmaBaseAddress->ISR & temp) == 0U)
 800267c:	e03d      	b.n	80026fa <HAL_DMA_PollForTransfer+0xfa>
  {
    if ((hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	211c      	movs	r1, #28
 800268a:	400b      	ands	r3, r1
 800268c:	2108      	movs	r1, #8
 800268e:	4099      	lsls	r1, r3
 8002690:	000b      	movs	r3, r1
 8002692:	4013      	ands	r3, r2
 8002694:	d016      	beq.n	80026c4 <HAL_DMA_PollForTransfer+0xc4>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	221c      	movs	r2, #28
 800269c:	401a      	ands	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2101      	movs	r1, #1
 80026a4:	4091      	lsls	r1, r2
 80026a6:	000a      	movs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2225      	movs	r2, #37	; 0x25
 80026b4:	2101      	movs	r1, #1
 80026b6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2224      	movs	r2, #36	; 0x24
 80026bc:	2100      	movs	r1, #0
 80026be:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e076      	b.n	80027b2 <HAL_DMA_PollForTransfer+0x1b2>

      return HAL_ERROR;
    }
#endif /* DMA2 */
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3301      	adds	r3, #1
 80026c8:	d017      	beq.n	80026fa <HAL_DMA_PollForTransfer+0xfa>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026ca:	f7fe fdb5 	bl	8001238 <HAL_GetTick>
 80026ce:	0002      	movs	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d302      	bcc.n	80026e0 <HAL_DMA_PollForTransfer+0xe0>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10c      	bne.n	80026fa <HAL_DMA_PollForTransfer+0xfa>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2225      	movs	r2, #37	; 0x25
 80026ea:	2101      	movs	r1, #1
 80026ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2224      	movs	r2, #36	; 0x24
 80026f2:	2100      	movs	r1, #0
 80026f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e05b      	b.n	80027b2 <HAL_DMA_PollForTransfer+0x1b2>
  while ((hdma->DmaBaseAddress->ISR & temp) == 0U)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	4013      	ands	r3, r2
 8002704:	d0bb      	beq.n	800267e <HAL_DMA_PollForTransfer+0x7e>
      }
    }
  }

  /*Check for DMAMUX Request generator (if used) overrun status */
  if (hdma->DMAmuxRequestGen != 0U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	2b00      	cmp	r3, #0
 800270c:	d01b      	beq.n	8002746 <HAL_DMA_PollForTransfer+0x146>
  {
    /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002718:	4013      	ands	r3, r2
 800271a:	d014      	beq.n	8002746 <HAL_DMA_PollForTransfer+0x146>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	2180      	movs	r1, #128	; 0x80
 8002728:	0049      	lsls	r1, r1, #1
 800272a:	430a      	orrs	r2, r1
 800272c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002736:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	00d2      	lsls	r2, r2, #3
 8002740:	431a      	orrs	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002750:	4013      	ands	r3, r2
 8002752:	d00b      	beq.n	800276c <HAL_DMA_PollForTransfer+0x16c>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800275c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	2280      	movs	r2, #128	; 0x80
 8002764:	0092      	lsls	r2, r2, #2
 8002766:	431a      	orrs	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 800276c:	230b      	movs	r3, #11
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d112      	bne.n	800279c <HAL_DMA_PollForTransfer+0x19c>
  {
    /* Clear the transfer complete flag */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU));
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	221c      	movs	r2, #28
 800277c:	401a      	ands	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	2102      	movs	r1, #2
 8002784:	4091      	lsls	r1, r2
 8002786:	000a      	movs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2224      	movs	r2, #36	; 0x24
 800278e:	2100      	movs	r1, #0
 8002790:	5499      	strb	r1, [r3, r2]

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2225      	movs	r2, #37	; 0x25
 8002796:	2101      	movs	r1, #1
 8002798:	5499      	strb	r1, [r3, r2]
 800279a:	e009      	b.n	80027b0 <HAL_DMA_PollForTransfer+0x1b0>
  }
  else
  {
    /* Clear the half transfer complete flag */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU));
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	221c      	movs	r2, #28
 80027a2:	401a      	ands	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	2104      	movs	r1, #4
 80027aa:	4091      	lsls	r1, r2
 80027ac:	000a      	movs	r2, r1
 80027ae:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */
  }

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	0018      	movs	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b006      	add	sp, #24
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d8:	221c      	movs	r2, #28
 80027da:	4013      	ands	r3, r2
 80027dc:	2204      	movs	r2, #4
 80027de:	409a      	lsls	r2, r3
 80027e0:	0013      	movs	r3, r2
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4013      	ands	r3, r2
 80027e6:	d026      	beq.n	8002836 <HAL_DMA_IRQHandler+0x7a>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2204      	movs	r2, #4
 80027ec:	4013      	ands	r3, r2
 80027ee:	d022      	beq.n	8002836 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2220      	movs	r2, #32
 80027f8:	4013      	ands	r3, r2
 80027fa:	d107      	bne.n	800280c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2104      	movs	r1, #4
 8002808:	438a      	bics	r2, r1
 800280a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	221c      	movs	r2, #28
 8002812:	401a      	ands	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	2104      	movs	r1, #4
 800281a:	4091      	lsls	r1, r2
 800281c:	000a      	movs	r2, r1
 800281e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	2b00      	cmp	r3, #0
 8002826:	d100      	bne.n	800282a <HAL_DMA_IRQHandler+0x6e>
 8002828:	e080      	b.n	800292c <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	0010      	movs	r0, r2
 8002832:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002834:	e07a      	b.n	800292c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	221c      	movs	r2, #28
 800283c:	4013      	ands	r3, r2
 800283e:	2202      	movs	r2, #2
 8002840:	409a      	lsls	r2, r3
 8002842:	0013      	movs	r3, r2
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4013      	ands	r3, r2
 8002848:	d03c      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x108>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2202      	movs	r2, #2
 800284e:	4013      	ands	r3, r2
 8002850:	d038      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2220      	movs	r2, #32
 800285a:	4013      	ands	r3, r2
 800285c:	d10b      	bne.n	8002876 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	210a      	movs	r1, #10
 800286a:	438a      	bics	r2, r1
 800286c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2225      	movs	r2, #37	; 0x25
 8002872:	2101      	movs	r1, #1
 8002874:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	001a      	movs	r2, r3
 800287c:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <HAL_DMA_IRQHandler+0x17c>)
 800287e:	429a      	cmp	r2, r3
 8002880:	d909      	bls.n	8002896 <HAL_DMA_IRQHandler+0xda>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	221c      	movs	r2, #28
 8002888:	401a      	ands	r2, r3
 800288a:	4b2c      	ldr	r3, [pc, #176]	; (800293c <HAL_DMA_IRQHandler+0x180>)
 800288c:	2102      	movs	r1, #2
 800288e:	4091      	lsls	r1, r2
 8002890:	000a      	movs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	e008      	b.n	80028a8 <HAL_DMA_IRQHandler+0xec>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	221c      	movs	r2, #28
 800289c:	401a      	ands	r2, r3
 800289e:	4b28      	ldr	r3, [pc, #160]	; (8002940 <HAL_DMA_IRQHandler+0x184>)
 80028a0:	2102      	movs	r1, #2
 80028a2:	4091      	lsls	r1, r2
 80028a4:	000a      	movs	r2, r1
 80028a6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2224      	movs	r2, #36	; 0x24
 80028ac:	2100      	movs	r1, #0
 80028ae:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d039      	beq.n	800292c <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	0010      	movs	r0, r2
 80028c0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80028c2:	e033      	b.n	800292c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	221c      	movs	r2, #28
 80028ca:	4013      	ands	r3, r2
 80028cc:	2208      	movs	r2, #8
 80028ce:	409a      	lsls	r2, r3
 80028d0:	0013      	movs	r3, r2
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4013      	ands	r3, r2
 80028d6:	d02a      	beq.n	800292e <HAL_DMA_IRQHandler+0x172>
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2208      	movs	r2, #8
 80028dc:	4013      	ands	r3, r2
 80028de:	d026      	beq.n	800292e <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	210e      	movs	r1, #14
 80028ec:	438a      	bics	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	221c      	movs	r2, #28
 80028f6:	401a      	ands	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	2101      	movs	r1, #1
 80028fe:	4091      	lsls	r1, r2
 8002900:	000a      	movs	r2, r1
 8002902:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2225      	movs	r2, #37	; 0x25
 800290e:	2101      	movs	r1, #1
 8002910:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2224      	movs	r2, #36	; 0x24
 8002916:	2100      	movs	r1, #0
 8002918:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	0010      	movs	r0, r2
 800292a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	46c0      	nop			; (mov r8, r8)
}
 8002930:	46bd      	mov	sp, r7
 8002932:	b004      	add	sp, #16
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	40020080 	.word	0x40020080
 800293c:	40020400 	.word	0x40020400
 8002940:	40020000 	.word	0x40020000

08002944 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800295a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002960:	2b00      	cmp	r3, #0
 8002962:	d004      	beq.n	800296e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800296c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	221c      	movs	r2, #28
 8002974:	401a      	ands	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2101      	movs	r1, #1
 800297c:	4091      	lsls	r1, r2
 800297e:	000a      	movs	r2, r1
 8002980:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b10      	cmp	r3, #16
 8002990:	d108      	bne.n	80029a4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029a2:	e007      	b.n	80029b4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	60da      	str	r2, [r3, #12]
}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b004      	add	sp, #16
 80029ba:	bd80      	pop	{r7, pc}

080029bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	001a      	movs	r2, r3
 80029ca:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d814      	bhi.n	80029fa <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d4:	089b      	lsrs	r3, r3, #2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4a1a      	ldr	r2, [pc, #104]	; (8002a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80029da:	189a      	adds	r2, r3, r2
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	001a      	movs	r2, r3
 80029e6:	23ff      	movs	r3, #255	; 0xff
 80029e8:	4013      	ands	r3, r2
 80029ea:	3b08      	subs	r3, #8
 80029ec:	2114      	movs	r1, #20
 80029ee:	0018      	movs	r0, r3
 80029f0:	f7fd fb88 	bl	8000104 <__udivsi3>
 80029f4:	0003      	movs	r3, r0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e014      	b.n	8002a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4a11      	ldr	r2, [pc, #68]	; (8002a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002a04:	189a      	adds	r2, r3, r2
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	001a      	movs	r2, r3
 8002a10:	23ff      	movs	r3, #255	; 0xff
 8002a12:	4013      	ands	r3, r2
 8002a14:	3b08      	subs	r3, #8
 8002a16:	2114      	movs	r1, #20
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f7fd fb73 	bl	8000104 <__udivsi3>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	3307      	adds	r3, #7
 8002a22:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a09      	ldr	r2, [pc, #36]	; (8002a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8002a28:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	221f      	movs	r2, #31
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2201      	movs	r2, #1
 8002a32:	409a      	lsls	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a38:	46c0      	nop			; (mov r8, r8)
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b004      	add	sp, #16
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40020407 	.word	0x40020407
 8002a44:	40020800 	.word	0x40020800
 8002a48:	4002081c 	.word	0x4002081c
 8002a4c:	40020880 	.word	0x40020880

08002a50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	227f      	movs	r2, #127	; 0x7f
 8002a5e:	4013      	ands	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a66:	4694      	mov	ip, r2
 8002a68:	4463      	add	r3, ip
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	001a      	movs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a07      	ldr	r2, [pc, #28]	; (8002a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a76:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2201      	movs	r2, #1
 8002a82:	409a      	lsls	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b004      	add	sp, #16
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	1000823f 	.word	0x1000823f
 8002a94:	40020940 	.word	0x40020940

08002a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa6:	e14d      	b.n	8002d44 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2101      	movs	r1, #1
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4091      	lsls	r1, r2
 8002ab2:	000a      	movs	r2, r1
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d100      	bne.n	8002ac0 <HAL_GPIO_Init+0x28>
 8002abe:	e13e      	b.n	8002d3e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d005      	beq.n	8002ad8 <HAL_GPIO_Init+0x40>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d130      	bne.n	8002b3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	0013      	movs	r3, r2
 8002ae8:	43da      	mvns	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	409a      	lsls	r2, r3
 8002afa:	0013      	movs	r3, r2
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b0e:	2201      	movs	r2, #1
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	409a      	lsls	r2, r3
 8002b14:	0013      	movs	r3, r2
 8002b16:	43da      	mvns	r2, r3
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	2201      	movs	r2, #1
 8002b26:	401a      	ands	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2203      	movs	r2, #3
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d017      	beq.n	8002b76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2203      	movs	r2, #3
 8002b52:	409a      	lsls	r2, r3
 8002b54:	0013      	movs	r3, r2
 8002b56:	43da      	mvns	r2, r3
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	409a      	lsls	r2, r3
 8002b68:	0013      	movs	r3, r2
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d123      	bne.n	8002bca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	08da      	lsrs	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3208      	adds	r2, #8
 8002b8a:	0092      	lsls	r2, r2, #2
 8002b8c:	58d3      	ldr	r3, [r2, r3]
 8002b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2207      	movs	r2, #7
 8002b94:	4013      	ands	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	220f      	movs	r2, #15
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	0013      	movs	r3, r2
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2107      	movs	r1, #7
 8002bae:	400b      	ands	r3, r1
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	0013      	movs	r3, r2
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	08da      	lsrs	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3208      	adds	r2, #8
 8002bc4:	0092      	lsls	r2, r2, #2
 8002bc6:	6939      	ldr	r1, [r7, #16]
 8002bc8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	0013      	movs	r3, r2
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4013      	ands	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2203      	movs	r2, #3
 8002be8:	401a      	ands	r2, r3
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	0013      	movs	r3, r2
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	23c0      	movs	r3, #192	; 0xc0
 8002c04:	029b      	lsls	r3, r3, #10
 8002c06:	4013      	ands	r3, r2
 8002c08:	d100      	bne.n	8002c0c <HAL_GPIO_Init+0x174>
 8002c0a:	e098      	b.n	8002d3e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002c0c:	4a53      	ldr	r2, [pc, #332]	; (8002d5c <HAL_GPIO_Init+0x2c4>)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	089b      	lsrs	r3, r3, #2
 8002c12:	3318      	adds	r3, #24
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	589b      	ldr	r3, [r3, r2]
 8002c18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	4013      	ands	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	220f      	movs	r2, #15
 8002c24:	409a      	lsls	r2, r3
 8002c26:	0013      	movs	r3, r2
 8002c28:	43da      	mvns	r2, r3
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	23a0      	movs	r3, #160	; 0xa0
 8002c34:	05db      	lsls	r3, r3, #23
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d019      	beq.n	8002c6e <HAL_GPIO_Init+0x1d6>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a48      	ldr	r2, [pc, #288]	; (8002d60 <HAL_GPIO_Init+0x2c8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d013      	beq.n	8002c6a <HAL_GPIO_Init+0x1d2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a47      	ldr	r2, [pc, #284]	; (8002d64 <HAL_GPIO_Init+0x2cc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00d      	beq.n	8002c66 <HAL_GPIO_Init+0x1ce>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a46      	ldr	r2, [pc, #280]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d007      	beq.n	8002c62 <HAL_GPIO_Init+0x1ca>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a45      	ldr	r2, [pc, #276]	; (8002d6c <HAL_GPIO_Init+0x2d4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <HAL_GPIO_Init+0x1c6>
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	e008      	b.n	8002c70 <HAL_GPIO_Init+0x1d8>
 8002c5e:	2305      	movs	r3, #5
 8002c60:	e006      	b.n	8002c70 <HAL_GPIO_Init+0x1d8>
 8002c62:	2303      	movs	r3, #3
 8002c64:	e004      	b.n	8002c70 <HAL_GPIO_Init+0x1d8>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e002      	b.n	8002c70 <HAL_GPIO_Init+0x1d8>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <HAL_GPIO_Init+0x1d8>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	2103      	movs	r1, #3
 8002c74:	400a      	ands	r2, r1
 8002c76:	00d2      	lsls	r2, r2, #3
 8002c78:	4093      	lsls	r3, r2
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002c80:	4936      	ldr	r1, [pc, #216]	; (8002d5c <HAL_GPIO_Init+0x2c4>)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	089b      	lsrs	r3, r3, #2
 8002c86:	3318      	adds	r3, #24
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c8e:	4a33      	ldr	r2, [pc, #204]	; (8002d5c <HAL_GPIO_Init+0x2c4>)
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	58d3      	ldr	r3, [r2, r3]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	43da      	mvns	r2, r3
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	025b      	lsls	r3, r3, #9
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cb4:	4929      	ldr	r1, [pc, #164]	; (8002d5c <HAL_GPIO_Init+0x2c4>)
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002cbc:	4a27      	ldr	r2, [pc, #156]	; (8002d5c <HAL_GPIO_Init+0x2c4>)
 8002cbe:	2384      	movs	r3, #132	; 0x84
 8002cc0:	58d3      	ldr	r3, [r2, r3]
 8002cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	029b      	lsls	r3, r3, #10
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ce2:	491e      	ldr	r1, [pc, #120]	; (8002d5c <HAL_GPIO_Init+0x2c4>)
 8002ce4:	2284      	movs	r2, #132	; 0x84
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cea:	4b1c      	ldr	r3, [pc, #112]	; (8002d5c <HAL_GPIO_Init+0x2c4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	035b      	lsls	r3, r3, #13
 8002d02:	4013      	ands	r3, r2
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d0e:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <HAL_GPIO_Init+0x2c4>)
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002d14:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <HAL_GPIO_Init+0x2c4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	43da      	mvns	r2, r3
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	039b      	lsls	r3, r3, #14
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d38:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_GPIO_Init+0x2c4>)
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	3301      	adds	r3, #1
 8002d42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	40da      	lsrs	r2, r3
 8002d4c:	1e13      	subs	r3, r2, #0
 8002d4e:	d000      	beq.n	8002d52 <HAL_GPIO_Init+0x2ba>
 8002d50:	e6aa      	b.n	8002aa8 <HAL_GPIO_Init+0x10>
  }
}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	46c0      	nop			; (mov r8, r8)
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b006      	add	sp, #24
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40021800 	.word	0x40021800
 8002d60:	50000400 	.word	0x50000400
 8002d64:	50000800 	.word	0x50000800
 8002d68:	50000c00 	.word	0x50000c00
 8002d6c:	50001000 	.word	0x50001000

08002d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	0008      	movs	r0, r1
 8002d7a:	0011      	movs	r1, r2
 8002d7c:	1cbb      	adds	r3, r7, #2
 8002d7e:	1c02      	adds	r2, r0, #0
 8002d80:	801a      	strh	r2, [r3, #0]
 8002d82:	1c7b      	adds	r3, r7, #1
 8002d84:	1c0a      	adds	r2, r1, #0
 8002d86:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d88:	1c7b      	adds	r3, r7, #1
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d004      	beq.n	8002d9a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d90:	1cbb      	adds	r3, r7, #2
 8002d92:	881a      	ldrh	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d98:	e003      	b.n	8002da2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d9a:	1cbb      	adds	r3, r7, #2
 8002d9c:	881a      	ldrh	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b002      	add	sp, #8
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	0002      	movs	r2, r0
 8002db4:	1dbb      	adds	r3, r7, #6
 8002db6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002db8:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	1dba      	adds	r2, r7, #6
 8002dbe:	8812      	ldrh	r2, [r2, #0]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d008      	beq.n	8002dd6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002dc4:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002dc6:	1dba      	adds	r2, r7, #6
 8002dc8:	8812      	ldrh	r2, [r2, #0]
 8002dca:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002dcc:	1dbb      	adds	r3, r7, #6
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f000 f815 	bl	8002e00 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	1dba      	adds	r2, r7, #6
 8002ddc:	8812      	ldrh	r2, [r2, #0]
 8002dde:	4013      	ands	r3, r2
 8002de0:	d008      	beq.n	8002df4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002de4:	1dba      	adds	r2, r7, #6
 8002de6:	8812      	ldrh	r2, [r2, #0]
 8002de8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002dea:	1dbb      	adds	r3, r7, #6
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 f810 	bl	8002e14 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b002      	add	sp, #8
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40021800 	.word	0x40021800

08002e00 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	0002      	movs	r2, r0
 8002e08:	1dbb      	adds	r3, r7, #6
 8002e0a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002e0c:	46c0      	nop			; (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b002      	add	sp, #8
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	0002      	movs	r2, r0
 8002e1c:	1dbb      	adds	r3, r7, #6
 8002e1e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b002      	add	sp, #8
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002e30:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a19      	ldr	r2, [pc, #100]	; (8002e9c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	4b17      	ldr	r3, [pc, #92]	; (8002e98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d11f      	bne.n	8002e8c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002e4c:	4b14      	ldr	r3, [pc, #80]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	0013      	movs	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	189b      	adds	r3, r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4912      	ldr	r1, [pc, #72]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7fd f952 	bl	8000104 <__udivsi3>
 8002e60:	0003      	movs	r3, r0
 8002e62:	3301      	adds	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e66:	e008      	b.n	8002e7a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	e001      	b.n	8002e7a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e009      	b.n	8002e8e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e7a:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	401a      	ands	r2, r3
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d0ed      	beq.n	8002e68 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	0018      	movs	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b004      	add	sp, #16
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	40007000 	.word	0x40007000
 8002e9c:	fffff9ff 	.word	0xfffff9ff
 8002ea0:	20000004 	.word	0x20000004
 8002ea4:	000f4240 	.word	0x000f4240

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d102      	bne.n	8002ebc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f000 fb56 	bl	8003568 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d100      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x20>
 8002ec6:	e07d      	b.n	8002fc4 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ec8:	4bc3      	ldr	r3, [pc, #780]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2238      	movs	r2, #56	; 0x38
 8002ece:	4013      	ands	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed2:	4bc1      	ldr	r3, [pc, #772]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	4013      	ands	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	d102      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x40>
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d002      	beq.n	8002eee <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eee:	4bba      	ldr	r3, [pc, #744]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	029b      	lsls	r3, r3, #10
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d063      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x11a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d15f      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	f000 fb30 	bl	8003568 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	025b      	lsls	r3, r3, #9
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_OscConfig+0x7c>
 8002f14:	4bb0      	ldr	r3, [pc, #704]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4baf      	ldr	r3, [pc, #700]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002f1a:	2180      	movs	r1, #128	; 0x80
 8002f1c:	0249      	lsls	r1, r1, #9
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	e020      	b.n	8002f66 <HAL_RCC_OscConfig+0xbe>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	23a0      	movs	r3, #160	; 0xa0
 8002f2a:	02db      	lsls	r3, r3, #11
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d10e      	bne.n	8002f4e <HAL_RCC_OscConfig+0xa6>
 8002f30:	4ba9      	ldr	r3, [pc, #676]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4ba8      	ldr	r3, [pc, #672]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002f36:	2180      	movs	r1, #128	; 0x80
 8002f38:	02c9      	lsls	r1, r1, #11
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	4ba6      	ldr	r3, [pc, #664]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4ba5      	ldr	r3, [pc, #660]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002f44:	2180      	movs	r1, #128	; 0x80
 8002f46:	0249      	lsls	r1, r1, #9
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e00b      	b.n	8002f66 <HAL_RCC_OscConfig+0xbe>
 8002f4e:	4ba2      	ldr	r3, [pc, #648]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4ba1      	ldr	r3, [pc, #644]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002f54:	49a1      	ldr	r1, [pc, #644]	; (80031dc <HAL_RCC_OscConfig+0x334>)
 8002f56:	400a      	ands	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	4b9f      	ldr	r3, [pc, #636]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4b9e      	ldr	r3, [pc, #632]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002f60:	499f      	ldr	r1, [pc, #636]	; (80031e0 <HAL_RCC_OscConfig+0x338>)
 8002f62:	400a      	ands	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d014      	beq.n	8002f98 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7fe f963 	bl	8001238 <HAL_GetTick>
 8002f72:	0003      	movs	r3, r0
 8002f74:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f78:	f7fe f95e 	bl	8001238 <HAL_GetTick>
 8002f7c:	0002      	movs	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e2ee      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f8a:	4b93      	ldr	r3, [pc, #588]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	029b      	lsls	r3, r3, #10
 8002f92:	4013      	ands	r3, r2
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0xd0>
 8002f96:	e015      	b.n	8002fc4 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe f94e 	bl	8001238 <HAL_GetTick>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa2:	f7fe f949 	bl	8001238 <HAL_GetTick>
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b64      	cmp	r3, #100	; 0x64
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e2d9      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fb4:	4b88      	ldr	r3, [pc, #544]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	029b      	lsls	r3, r3, #10
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d1f0      	bne.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
 8002fc0:	e000      	b.n	8002fc4 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d100      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x128>
 8002fce:	e099      	b.n	8003104 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fd0:	4b81      	ldr	r3, [pc, #516]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2238      	movs	r2, #56	; 0x38
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fda:	4b7f      	ldr	r3, [pc, #508]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2203      	movs	r2, #3
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b10      	cmp	r3, #16
 8002fe8:	d102      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x148>
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d002      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d135      	bne.n	8003062 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ff6:	4b78      	ldr	r3, [pc, #480]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4013      	ands	r3, r2
 8003000:	d005      	beq.n	800300e <HAL_RCC_OscConfig+0x166>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e2ac      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300e:	4b72      	ldr	r3, [pc, #456]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4a74      	ldr	r2, [pc, #464]	; (80031e4 <HAL_RCC_OscConfig+0x33c>)
 8003014:	4013      	ands	r3, r2
 8003016:	0019      	movs	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	021a      	lsls	r2, r3, #8
 800301e:	4b6e      	ldr	r3, [pc, #440]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8003020:	430a      	orrs	r2, r1
 8003022:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d112      	bne.n	8003050 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800302a:	4b6b      	ldr	r3, [pc, #428]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a6e      	ldr	r2, [pc, #440]	; (80031e8 <HAL_RCC_OscConfig+0x340>)
 8003030:	4013      	ands	r3, r2
 8003032:	0019      	movs	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	4b67      	ldr	r3, [pc, #412]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 800303a:	430a      	orrs	r2, r1
 800303c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800303e:	4b66      	ldr	r3, [pc, #408]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	0adb      	lsrs	r3, r3, #11
 8003044:	2207      	movs	r2, #7
 8003046:	4013      	ands	r3, r2
 8003048:	4a68      	ldr	r2, [pc, #416]	; (80031ec <HAL_RCC_OscConfig+0x344>)
 800304a:	40da      	lsrs	r2, r3
 800304c:	4b68      	ldr	r3, [pc, #416]	; (80031f0 <HAL_RCC_OscConfig+0x348>)
 800304e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003050:	4b68      	ldr	r3, [pc, #416]	; (80031f4 <HAL_RCC_OscConfig+0x34c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	0018      	movs	r0, r3
 8003056:	f7fe f893 	bl	8001180 <HAL_InitTick>
 800305a:	1e03      	subs	r3, r0, #0
 800305c:	d051      	beq.n	8003102 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e282      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d030      	beq.n	80030cc <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800306a:	4b5b      	ldr	r3, [pc, #364]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a5e      	ldr	r2, [pc, #376]	; (80031e8 <HAL_RCC_OscConfig+0x340>)
 8003070:	4013      	ands	r3, r2
 8003072:	0019      	movs	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	4b57      	ldr	r3, [pc, #348]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800307e:	4b56      	ldr	r3, [pc, #344]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4b55      	ldr	r3, [pc, #340]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8003084:	2180      	movs	r1, #128	; 0x80
 8003086:	0049      	lsls	r1, r1, #1
 8003088:	430a      	orrs	r2, r1
 800308a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7fe f8d4 	bl	8001238 <HAL_GetTick>
 8003090:	0003      	movs	r3, r0
 8003092:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003096:	f7fe f8cf 	bl	8001238 <HAL_GetTick>
 800309a:	0002      	movs	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e25f      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030a8:	4b4b      	ldr	r3, [pc, #300]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	2380      	movs	r3, #128	; 0x80
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4013      	ands	r3, r2
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b4:	4b48      	ldr	r3, [pc, #288]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a4a      	ldr	r2, [pc, #296]	; (80031e4 <HAL_RCC_OscConfig+0x33c>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	0019      	movs	r1, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	021a      	lsls	r2, r3, #8
 80030c4:	4b44      	ldr	r3, [pc, #272]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 80030c6:	430a      	orrs	r2, r1
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	e01b      	b.n	8003104 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80030cc:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b41      	ldr	r3, [pc, #260]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 80030d2:	4949      	ldr	r1, [pc, #292]	; (80031f8 <HAL_RCC_OscConfig+0x350>)
 80030d4:	400a      	ands	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d8:	f7fe f8ae 	bl	8001238 <HAL_GetTick>
 80030dc:	0003      	movs	r3, r0
 80030de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e2:	f7fe f8a9 	bl	8001238 <HAL_GetTick>
 80030e6:	0002      	movs	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e239      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f4:	4b38      	ldr	r3, [pc, #224]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4013      	ands	r3, r2
 80030fe:	d1f0      	bne.n	80030e2 <HAL_RCC_OscConfig+0x23a>
 8003100:	e000      	b.n	8003104 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003102:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2208      	movs	r2, #8
 800310a:	4013      	ands	r3, r2
 800310c:	d047      	beq.n	800319e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800310e:	4b32      	ldr	r3, [pc, #200]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2238      	movs	r2, #56	; 0x38
 8003114:	4013      	ands	r3, r2
 8003116:	2b18      	cmp	r3, #24
 8003118:	d10a      	bne.n	8003130 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800311a:	4b2f      	ldr	r3, [pc, #188]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 800311c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311e:	2202      	movs	r2, #2
 8003120:	4013      	ands	r3, r2
 8003122:	d03c      	beq.n	800319e <HAL_RCC_OscConfig+0x2f6>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d138      	bne.n	800319e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e21b      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d019      	beq.n	800316c <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003138:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 800313a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800313c:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 800313e:	2101      	movs	r1, #1
 8003140:	430a      	orrs	r2, r1
 8003142:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe f878 	bl	8001238 <HAL_GetTick>
 8003148:	0003      	movs	r3, r0
 800314a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800314e:	f7fe f873 	bl	8001238 <HAL_GetTick>
 8003152:	0002      	movs	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e203      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8003162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003164:	2202      	movs	r2, #2
 8003166:	4013      	ands	r3, r2
 8003168:	d0f1      	beq.n	800314e <HAL_RCC_OscConfig+0x2a6>
 800316a:	e018      	b.n	800319e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800316c:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 800316e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003170:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8003172:	2101      	movs	r1, #1
 8003174:	438a      	bics	r2, r1
 8003176:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7fe f85e 	bl	8001238 <HAL_GetTick>
 800317c:	0003      	movs	r3, r0
 800317e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003182:	f7fe f859 	bl	8001238 <HAL_GetTick>
 8003186:	0002      	movs	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e1e9      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003194:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 8003196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003198:	2202      	movs	r2, #2
 800319a:	4013      	ands	r3, r2
 800319c:	d1f1      	bne.n	8003182 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2204      	movs	r2, #4
 80031a4:	4013      	ands	r3, r2
 80031a6:	d100      	bne.n	80031aa <HAL_RCC_OscConfig+0x302>
 80031a8:	e0c6      	b.n	8003338 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031aa:	231f      	movs	r3, #31
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80031b2:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2238      	movs	r2, #56	; 0x38
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d11e      	bne.n	80031fc <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_RCC_OscConfig+0x330>)
 80031c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c2:	2202      	movs	r2, #2
 80031c4:	4013      	ands	r3, r2
 80031c6:	d100      	bne.n	80031ca <HAL_RCC_OscConfig+0x322>
 80031c8:	e0b6      	b.n	8003338 <HAL_RCC_OscConfig+0x490>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d000      	beq.n	80031d4 <HAL_RCC_OscConfig+0x32c>
 80031d2:	e0b1      	b.n	8003338 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e1c7      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
 80031d8:	40021000 	.word	0x40021000
 80031dc:	fffeffff 	.word	0xfffeffff
 80031e0:	fffbffff 	.word	0xfffbffff
 80031e4:	ffff80ff 	.word	0xffff80ff
 80031e8:	ffffc7ff 	.word	0xffffc7ff
 80031ec:	00f42400 	.word	0x00f42400
 80031f0:	20000004 	.word	0x20000004
 80031f4:	20000008 	.word	0x20000008
 80031f8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031fc:	4bb8      	ldr	r3, [pc, #736]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 80031fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	055b      	lsls	r3, r3, #21
 8003204:	4013      	ands	r3, r2
 8003206:	d101      	bne.n	800320c <HAL_RCC_OscConfig+0x364>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x366>
 800320c:	2300      	movs	r3, #0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d011      	beq.n	8003236 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003212:	4bb3      	ldr	r3, [pc, #716]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003216:	4bb2      	ldr	r3, [pc, #712]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003218:	2180      	movs	r1, #128	; 0x80
 800321a:	0549      	lsls	r1, r1, #21
 800321c:	430a      	orrs	r2, r1
 800321e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003220:	4baf      	ldr	r3, [pc, #700]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003224:	2380      	movs	r3, #128	; 0x80
 8003226:	055b      	lsls	r3, r3, #21
 8003228:	4013      	ands	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800322e:	231f      	movs	r3, #31
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003236:	4bab      	ldr	r3, [pc, #684]	; (80034e4 <HAL_RCC_OscConfig+0x63c>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	4013      	ands	r3, r2
 8003240:	d11a      	bne.n	8003278 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003242:	4ba8      	ldr	r3, [pc, #672]	; (80034e4 <HAL_RCC_OscConfig+0x63c>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	4ba7      	ldr	r3, [pc, #668]	; (80034e4 <HAL_RCC_OscConfig+0x63c>)
 8003248:	2180      	movs	r1, #128	; 0x80
 800324a:	0049      	lsls	r1, r1, #1
 800324c:	430a      	orrs	r2, r1
 800324e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003250:	f7fd fff2 	bl	8001238 <HAL_GetTick>
 8003254:	0003      	movs	r3, r0
 8003256:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325a:	f7fd ffed 	bl	8001238 <HAL_GetTick>
 800325e:	0002      	movs	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e17d      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800326c:	4b9d      	ldr	r3, [pc, #628]	; (80034e4 <HAL_RCC_OscConfig+0x63c>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4013      	ands	r3, r2
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d106      	bne.n	800328e <HAL_RCC_OscConfig+0x3e6>
 8003280:	4b97      	ldr	r3, [pc, #604]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003282:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003284:	4b96      	ldr	r3, [pc, #600]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003286:	2101      	movs	r1, #1
 8003288:	430a      	orrs	r2, r1
 800328a:	65da      	str	r2, [r3, #92]	; 0x5c
 800328c:	e01c      	b.n	80032c8 <HAL_RCC_OscConfig+0x420>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b05      	cmp	r3, #5
 8003294:	d10c      	bne.n	80032b0 <HAL_RCC_OscConfig+0x408>
 8003296:	4b92      	ldr	r3, [pc, #584]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003298:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800329a:	4b91      	ldr	r3, [pc, #580]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 800329c:	2104      	movs	r1, #4
 800329e:	430a      	orrs	r2, r1
 80032a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80032a2:	4b8f      	ldr	r3, [pc, #572]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 80032a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032a6:	4b8e      	ldr	r3, [pc, #568]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 80032a8:	2101      	movs	r1, #1
 80032aa:	430a      	orrs	r2, r1
 80032ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80032ae:	e00b      	b.n	80032c8 <HAL_RCC_OscConfig+0x420>
 80032b0:	4b8b      	ldr	r3, [pc, #556]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 80032b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032b4:	4b8a      	ldr	r3, [pc, #552]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 80032b6:	2101      	movs	r1, #1
 80032b8:	438a      	bics	r2, r1
 80032ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80032bc:	4b88      	ldr	r3, [pc, #544]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 80032be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032c0:	4b87      	ldr	r3, [pc, #540]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 80032c2:	2104      	movs	r1, #4
 80032c4:	438a      	bics	r2, r1
 80032c6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d014      	beq.n	80032fa <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fd ffb2 	bl	8001238 <HAL_GetTick>
 80032d4:	0003      	movs	r3, r0
 80032d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d8:	e009      	b.n	80032ee <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fd ffad 	bl	8001238 <HAL_GetTick>
 80032de:	0002      	movs	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	4a80      	ldr	r2, [pc, #512]	; (80034e8 <HAL_RCC_OscConfig+0x640>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e13c      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ee:	4b7c      	ldr	r3, [pc, #496]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 80032f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f2:	2202      	movs	r2, #2
 80032f4:	4013      	ands	r3, r2
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x432>
 80032f8:	e013      	b.n	8003322 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fa:	f7fd ff9d 	bl	8001238 <HAL_GetTick>
 80032fe:	0003      	movs	r3, r0
 8003300:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003302:	e009      	b.n	8003318 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003304:	f7fd ff98 	bl	8001238 <HAL_GetTick>
 8003308:	0002      	movs	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	4a76      	ldr	r2, [pc, #472]	; (80034e8 <HAL_RCC_OscConfig+0x640>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e127      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003318:	4b71      	ldr	r3, [pc, #452]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	2202      	movs	r2, #2
 800331e:	4013      	ands	r3, r2
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003322:	231f      	movs	r3, #31
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d105      	bne.n	8003338 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800332c:	4b6c      	ldr	r3, [pc, #432]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 800332e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003330:	4b6b      	ldr	r3, [pc, #428]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003332:	496e      	ldr	r1, [pc, #440]	; (80034ec <HAL_RCC_OscConfig+0x644>)
 8003334:	400a      	ands	r2, r1
 8003336:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2220      	movs	r2, #32
 800333e:	4013      	ands	r3, r2
 8003340:	d039      	beq.n	80033b6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01b      	beq.n	8003382 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800334a:	4b65      	ldr	r3, [pc, #404]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b64      	ldr	r3, [pc, #400]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	03c9      	lsls	r1, r1, #15
 8003354:	430a      	orrs	r2, r1
 8003356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7fd ff6e 	bl	8001238 <HAL_GetTick>
 800335c:	0003      	movs	r3, r0
 800335e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003362:	f7fd ff69 	bl	8001238 <HAL_GetTick>
 8003366:	0002      	movs	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e0f9      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003374:	4b5a      	ldr	r3, [pc, #360]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	041b      	lsls	r3, r3, #16
 800337c:	4013      	ands	r3, r2
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x4ba>
 8003380:	e019      	b.n	80033b6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003382:	4b57      	ldr	r3, [pc, #348]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b56      	ldr	r3, [pc, #344]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003388:	4959      	ldr	r1, [pc, #356]	; (80034f0 <HAL_RCC_OscConfig+0x648>)
 800338a:	400a      	ands	r2, r1
 800338c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338e:	f7fd ff53 	bl	8001238 <HAL_GetTick>
 8003392:	0003      	movs	r3, r0
 8003394:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003398:	f7fd ff4e 	bl	8001238 <HAL_GetTick>
 800339c:	0002      	movs	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e0de      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80033aa:	4b4d      	ldr	r3, [pc, #308]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	041b      	lsls	r3, r3, #16
 80033b2:	4013      	ands	r3, r2
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d100      	bne.n	80033c0 <HAL_RCC_OscConfig+0x518>
 80033be:	e0d2      	b.n	8003566 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033c0:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2238      	movs	r2, #56	; 0x38
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d100      	bne.n	80033ce <HAL_RCC_OscConfig+0x526>
 80033cc:	e081      	b.n	80034d2 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d156      	bne.n	8003484 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d6:	4b42      	ldr	r3, [pc, #264]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4b41      	ldr	r3, [pc, #260]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 80033dc:	4945      	ldr	r1, [pc, #276]	; (80034f4 <HAL_RCC_OscConfig+0x64c>)
 80033de:	400a      	ands	r2, r1
 80033e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fd ff29 	bl	8001238 <HAL_GetTick>
 80033e6:	0003      	movs	r3, r0
 80033e8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ec:	f7fd ff24 	bl	8001238 <HAL_GetTick>
 80033f0:	0002      	movs	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0b4      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033fe:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	049b      	lsls	r3, r3, #18
 8003406:	4013      	ands	r3, r2
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800340a:	4b35      	ldr	r3, [pc, #212]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	4a3a      	ldr	r2, [pc, #232]	; (80034f8 <HAL_RCC_OscConfig+0x650>)
 8003410:	4013      	ands	r3, r2
 8003412:	0019      	movs	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003436:	431a      	orrs	r2, r3
 8003438:	4b29      	ldr	r3, [pc, #164]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 800343a:	430a      	orrs	r2, r1
 800343c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800343e:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003444:	2180      	movs	r1, #128	; 0x80
 8003446:	0449      	lsls	r1, r1, #17
 8003448:	430a      	orrs	r2, r1
 800344a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800344c:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003452:	2180      	movs	r1, #128	; 0x80
 8003454:	0549      	lsls	r1, r1, #21
 8003456:	430a      	orrs	r2, r1
 8003458:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7fd feed 	bl	8001238 <HAL_GetTick>
 800345e:	0003      	movs	r3, r0
 8003460:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fd fee8 	bl	8001238 <HAL_GetTick>
 8003468:	0002      	movs	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e078      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003476:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	049b      	lsls	r3, r3, #18
 800347e:	4013      	ands	r3, r2
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x5bc>
 8003482:	e070      	b.n	8003566 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003484:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 800348a:	491a      	ldr	r1, [pc, #104]	; (80034f4 <HAL_RCC_OscConfig+0x64c>)
 800348c:	400a      	ands	r2, r1
 800348e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003490:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 8003496:	2103      	movs	r1, #3
 8003498:	438a      	bics	r2, r1
 800349a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800349c:	4b10      	ldr	r3, [pc, #64]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 80034a2:	4916      	ldr	r1, [pc, #88]	; (80034fc <HAL_RCC_OscConfig+0x654>)
 80034a4:	400a      	ands	r2, r1
 80034a6:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fd fec6 	bl	8001238 <HAL_GetTick>
 80034ac:	0003      	movs	r3, r0
 80034ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fd fec1 	bl	8001238 <HAL_GetTick>
 80034b6:	0002      	movs	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e051      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_RCC_OscConfig+0x638>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	049b      	lsls	r3, r3, #18
 80034cc:	4013      	ands	r3, r2
 80034ce:	d1f0      	bne.n	80034b2 <HAL_RCC_OscConfig+0x60a>
 80034d0:	e049      	b.n	8003566 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d112      	bne.n	8003500 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e044      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40007000 	.word	0x40007000
 80034e8:	00001388 	.word	0x00001388
 80034ec:	efffffff 	.word	0xefffffff
 80034f0:	ffbfffff 	.word	0xffbfffff
 80034f4:	feffffff 	.word	0xfeffffff
 80034f8:	11c1808c 	.word	0x11c1808c
 80034fc:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003500:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <HAL_RCC_OscConfig+0x6c8>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2203      	movs	r2, #3
 800350a:	401a      	ands	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	429a      	cmp	r2, r3
 8003512:	d126      	bne.n	8003562 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2270      	movs	r2, #112	; 0x70
 8003518:	401a      	ands	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351e:	429a      	cmp	r2, r3
 8003520:	d11f      	bne.n	8003562 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	23fe      	movs	r3, #254	; 0xfe
 8003526:	01db      	lsls	r3, r3, #7
 8003528:	401a      	ands	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d116      	bne.n	8003562 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	23f8      	movs	r3, #248	; 0xf8
 8003538:	039b      	lsls	r3, r3, #14
 800353a:	401a      	ands	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d10e      	bne.n	8003562 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	23e0      	movs	r3, #224	; 0xe0
 8003548:	051b      	lsls	r3, r3, #20
 800354a:	401a      	ands	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d106      	bne.n	8003562 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	0f5b      	lsrs	r3, r3, #29
 8003558:	075a      	lsls	r2, r3, #29
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d001      	beq.n	8003566 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b008      	add	sp, #32
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000

08003574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0e9      	b.n	800375c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003588:	4b76      	ldr	r3, [pc, #472]	; (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2207      	movs	r2, #7
 800358e:	4013      	ands	r3, r2
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d91e      	bls.n	80035d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003596:	4b73      	ldr	r3, [pc, #460]	; (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2207      	movs	r2, #7
 800359c:	4393      	bics	r3, r2
 800359e:	0019      	movs	r1, r3
 80035a0:	4b70      	ldr	r3, [pc, #448]	; (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035a8:	f7fd fe46 	bl	8001238 <HAL_GetTick>
 80035ac:	0003      	movs	r3, r0
 80035ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035b0:	e009      	b.n	80035c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b2:	f7fd fe41 	bl	8001238 <HAL_GetTick>
 80035b6:	0002      	movs	r2, r0
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	4a6a      	ldr	r2, [pc, #424]	; (8003768 <HAL_RCC_ClockConfig+0x1f4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e0ca      	b.n	800375c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035c6:	4b67      	ldr	r3, [pc, #412]	; (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2207      	movs	r2, #7
 80035cc:	4013      	ands	r3, r2
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d1ee      	bne.n	80035b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2202      	movs	r2, #2
 80035da:	4013      	ands	r3, r2
 80035dc:	d015      	beq.n	800360a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2204      	movs	r2, #4
 80035e4:	4013      	ands	r3, r2
 80035e6:	d006      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035e8:	4b60      	ldr	r3, [pc, #384]	; (800376c <HAL_RCC_ClockConfig+0x1f8>)
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	4b5f      	ldr	r3, [pc, #380]	; (800376c <HAL_RCC_ClockConfig+0x1f8>)
 80035ee:	21e0      	movs	r1, #224	; 0xe0
 80035f0:	01c9      	lsls	r1, r1, #7
 80035f2:	430a      	orrs	r2, r1
 80035f4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f6:	4b5d      	ldr	r3, [pc, #372]	; (800376c <HAL_RCC_ClockConfig+0x1f8>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	4a5d      	ldr	r2, [pc, #372]	; (8003770 <HAL_RCC_ClockConfig+0x1fc>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	0019      	movs	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	4b59      	ldr	r3, [pc, #356]	; (800376c <HAL_RCC_ClockConfig+0x1f8>)
 8003606:	430a      	orrs	r2, r1
 8003608:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2201      	movs	r2, #1
 8003610:	4013      	ands	r3, r2
 8003612:	d057      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d107      	bne.n	800362c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800361c:	4b53      	ldr	r3, [pc, #332]	; (800376c <HAL_RCC_ClockConfig+0x1f8>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	029b      	lsls	r3, r3, #10
 8003624:	4013      	ands	r3, r2
 8003626:	d12b      	bne.n	8003680 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e097      	b.n	800375c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d107      	bne.n	8003644 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003634:	4b4d      	ldr	r3, [pc, #308]	; (800376c <HAL_RCC_ClockConfig+0x1f8>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	2380      	movs	r3, #128	; 0x80
 800363a:	049b      	lsls	r3, r3, #18
 800363c:	4013      	ands	r3, r2
 800363e:	d11f      	bne.n	8003680 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e08b      	b.n	800375c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d107      	bne.n	800365c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800364c:	4b47      	ldr	r3, [pc, #284]	; (800376c <HAL_RCC_ClockConfig+0x1f8>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4013      	ands	r3, r2
 8003656:	d113      	bne.n	8003680 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e07f      	b.n	800375c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b03      	cmp	r3, #3
 8003662:	d106      	bne.n	8003672 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003664:	4b41      	ldr	r3, [pc, #260]	; (800376c <HAL_RCC_ClockConfig+0x1f8>)
 8003666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003668:	2202      	movs	r2, #2
 800366a:	4013      	ands	r3, r2
 800366c:	d108      	bne.n	8003680 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e074      	b.n	800375c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003672:	4b3e      	ldr	r3, [pc, #248]	; (800376c <HAL_RCC_ClockConfig+0x1f8>)
 8003674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003676:	2202      	movs	r2, #2
 8003678:	4013      	ands	r3, r2
 800367a:	d101      	bne.n	8003680 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e06d      	b.n	800375c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003680:	4b3a      	ldr	r3, [pc, #232]	; (800376c <HAL_RCC_ClockConfig+0x1f8>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2207      	movs	r2, #7
 8003686:	4393      	bics	r3, r2
 8003688:	0019      	movs	r1, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	4b37      	ldr	r3, [pc, #220]	; (800376c <HAL_RCC_ClockConfig+0x1f8>)
 8003690:	430a      	orrs	r2, r1
 8003692:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003694:	f7fd fdd0 	bl	8001238 <HAL_GetTick>
 8003698:	0003      	movs	r3, r0
 800369a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369c:	e009      	b.n	80036b2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800369e:	f7fd fdcb 	bl	8001238 <HAL_GetTick>
 80036a2:	0002      	movs	r2, r0
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	4a2f      	ldr	r2, [pc, #188]	; (8003768 <HAL_RCC_ClockConfig+0x1f4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e054      	b.n	800375c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b2:	4b2e      	ldr	r3, [pc, #184]	; (800376c <HAL_RCC_ClockConfig+0x1f8>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2238      	movs	r2, #56	; 0x38
 80036b8:	401a      	ands	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d1ec      	bne.n	800369e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036c4:	4b27      	ldr	r3, [pc, #156]	; (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2207      	movs	r2, #7
 80036ca:	4013      	ands	r3, r2
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d21e      	bcs.n	8003710 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2207      	movs	r2, #7
 80036d8:	4393      	bics	r3, r2
 80036da:	0019      	movs	r1, r3
 80036dc:	4b21      	ldr	r3, [pc, #132]	; (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036e4:	f7fd fda8 	bl	8001238 <HAL_GetTick>
 80036e8:	0003      	movs	r3, r0
 80036ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036ec:	e009      	b.n	8003702 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ee:	f7fd fda3 	bl	8001238 <HAL_GetTick>
 80036f2:	0002      	movs	r2, r0
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	4a1b      	ldr	r2, [pc, #108]	; (8003768 <HAL_RCC_ClockConfig+0x1f4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e02c      	b.n	800375c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003702:	4b18      	ldr	r3, [pc, #96]	; (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2207      	movs	r2, #7
 8003708:	4013      	ands	r3, r2
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d1ee      	bne.n	80036ee <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2204      	movs	r2, #4
 8003716:	4013      	ands	r3, r2
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800371a:	4b14      	ldr	r3, [pc, #80]	; (800376c <HAL_RCC_ClockConfig+0x1f8>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	4a15      	ldr	r2, [pc, #84]	; (8003774 <HAL_RCC_ClockConfig+0x200>)
 8003720:	4013      	ands	r3, r2
 8003722:	0019      	movs	r1, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	4b10      	ldr	r3, [pc, #64]	; (800376c <HAL_RCC_ClockConfig+0x1f8>)
 800372a:	430a      	orrs	r2, r1
 800372c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800372e:	f000 f829 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8003732:	0001      	movs	r1, r0
 8003734:	4b0d      	ldr	r3, [pc, #52]	; (800376c <HAL_RCC_ClockConfig+0x1f8>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	220f      	movs	r2, #15
 800373c:	401a      	ands	r2, r3
 800373e:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <HAL_RCC_ClockConfig+0x204>)
 8003740:	0092      	lsls	r2, r2, #2
 8003742:	58d3      	ldr	r3, [r2, r3]
 8003744:	221f      	movs	r2, #31
 8003746:	4013      	ands	r3, r2
 8003748:	000a      	movs	r2, r1
 800374a:	40da      	lsrs	r2, r3
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCC_ClockConfig+0x208>)
 800374e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_RCC_ClockConfig+0x20c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	0018      	movs	r0, r3
 8003756:	f7fd fd13 	bl	8001180 <HAL_InitTick>
 800375a:	0003      	movs	r3, r0
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b004      	add	sp, #16
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40022000 	.word	0x40022000
 8003768:	00001388 	.word	0x00001388
 800376c:	40021000 	.word	0x40021000
 8003770:	fffff0ff 	.word	0xfffff0ff
 8003774:	ffff8fff 	.word	0xffff8fff
 8003778:	08003db0 	.word	0x08003db0
 800377c:	20000004 	.word	0x20000004
 8003780:	20000008 	.word	0x20000008

08003784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800378a:	4b3c      	ldr	r3, [pc, #240]	; (800387c <HAL_RCC_GetSysClockFreq+0xf8>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2238      	movs	r2, #56	; 0x38
 8003790:	4013      	ands	r3, r2
 8003792:	d10f      	bne.n	80037b4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003794:	4b39      	ldr	r3, [pc, #228]	; (800387c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	0adb      	lsrs	r3, r3, #11
 800379a:	2207      	movs	r2, #7
 800379c:	4013      	ands	r3, r2
 800379e:	2201      	movs	r2, #1
 80037a0:	409a      	lsls	r2, r3
 80037a2:	0013      	movs	r3, r2
 80037a4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80037a6:	6839      	ldr	r1, [r7, #0]
 80037a8:	4835      	ldr	r0, [pc, #212]	; (8003880 <HAL_RCC_GetSysClockFreq+0xfc>)
 80037aa:	f7fc fcab 	bl	8000104 <__udivsi3>
 80037ae:	0003      	movs	r3, r0
 80037b0:	613b      	str	r3, [r7, #16]
 80037b2:	e05d      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037b4:	4b31      	ldr	r3, [pc, #196]	; (800387c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2238      	movs	r2, #56	; 0x38
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d102      	bne.n	80037c6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037c0:	4b30      	ldr	r3, [pc, #192]	; (8003884 <HAL_RCC_GetSysClockFreq+0x100>)
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	e054      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c6:	4b2d      	ldr	r3, [pc, #180]	; (800387c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2238      	movs	r2, #56	; 0x38
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b10      	cmp	r3, #16
 80037d0:	d138      	bne.n	8003844 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80037d2:	4b2a      	ldr	r3, [pc, #168]	; (800387c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	2203      	movs	r2, #3
 80037d8:	4013      	ands	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037dc:	4b27      	ldr	r3, [pc, #156]	; (800387c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	2207      	movs	r2, #7
 80037e4:	4013      	ands	r3, r2
 80037e6:	3301      	adds	r3, #1
 80037e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d10d      	bne.n	800380c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037f0:	68b9      	ldr	r1, [r7, #8]
 80037f2:	4824      	ldr	r0, [pc, #144]	; (8003884 <HAL_RCC_GetSysClockFreq+0x100>)
 80037f4:	f7fc fc86 	bl	8000104 <__udivsi3>
 80037f8:	0003      	movs	r3, r0
 80037fa:	0019      	movs	r1, r3
 80037fc:	4b1f      	ldr	r3, [pc, #124]	; (800387c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	0a1b      	lsrs	r3, r3, #8
 8003802:	227f      	movs	r2, #127	; 0x7f
 8003804:	4013      	ands	r3, r2
 8003806:	434b      	muls	r3, r1
 8003808:	617b      	str	r3, [r7, #20]
        break;
 800380a:	e00d      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	481c      	ldr	r0, [pc, #112]	; (8003880 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003810:	f7fc fc78 	bl	8000104 <__udivsi3>
 8003814:	0003      	movs	r3, r0
 8003816:	0019      	movs	r1, r3
 8003818:	4b18      	ldr	r3, [pc, #96]	; (800387c <HAL_RCC_GetSysClockFreq+0xf8>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	0a1b      	lsrs	r3, r3, #8
 800381e:	227f      	movs	r2, #127	; 0x7f
 8003820:	4013      	ands	r3, r2
 8003822:	434b      	muls	r3, r1
 8003824:	617b      	str	r3, [r7, #20]
        break;
 8003826:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003828:	4b14      	ldr	r3, [pc, #80]	; (800387c <HAL_RCC_GetSysClockFreq+0xf8>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	0f5b      	lsrs	r3, r3, #29
 800382e:	2207      	movs	r2, #7
 8003830:	4013      	ands	r3, r2
 8003832:	3301      	adds	r3, #1
 8003834:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	6978      	ldr	r0, [r7, #20]
 800383a:	f7fc fc63 	bl	8000104 <__udivsi3>
 800383e:	0003      	movs	r3, r0
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	e015      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003844:	4b0d      	ldr	r3, [pc, #52]	; (800387c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2238      	movs	r2, #56	; 0x38
 800384a:	4013      	ands	r3, r2
 800384c:	2b20      	cmp	r3, #32
 800384e:	d103      	bne.n	8003858 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	e00b      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003858:	4b08      	ldr	r3, [pc, #32]	; (800387c <HAL_RCC_GetSysClockFreq+0xf8>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2238      	movs	r2, #56	; 0x38
 800385e:	4013      	ands	r3, r2
 8003860:	2b18      	cmp	r3, #24
 8003862:	d103      	bne.n	800386c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003864:	23fa      	movs	r3, #250	; 0xfa
 8003866:	01db      	lsls	r3, r3, #7
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	e001      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003870:	693b      	ldr	r3, [r7, #16]
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b006      	add	sp, #24
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	40021000 	.word	0x40021000
 8003880:	00f42400 	.word	0x00f42400
 8003884:	007a1200 	.word	0x007a1200

08003888 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003890:	2313      	movs	r3, #19
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003898:	2312      	movs	r3, #18
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	029b      	lsls	r3, r3, #10
 80038a8:	4013      	ands	r3, r2
 80038aa:	d100      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 80038ac:	e0ad      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ae:	2011      	movs	r0, #17
 80038b0:	183b      	adds	r3, r7, r0
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b6:	4b47      	ldr	r3, [pc, #284]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ba:	2380      	movs	r3, #128	; 0x80
 80038bc:	055b      	lsls	r3, r3, #21
 80038be:	4013      	ands	r3, r2
 80038c0:	d110      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	4b44      	ldr	r3, [pc, #272]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038c6:	4b43      	ldr	r3, [pc, #268]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038c8:	2180      	movs	r1, #128	; 0x80
 80038ca:	0549      	lsls	r1, r1, #21
 80038cc:	430a      	orrs	r2, r1
 80038ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80038d0:	4b40      	ldr	r3, [pc, #256]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	055b      	lsls	r3, r3, #21
 80038d8:	4013      	ands	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038de:	183b      	adds	r3, r7, r0
 80038e0:	2201      	movs	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038e4:	4b3c      	ldr	r3, [pc, #240]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b3b      	ldr	r3, [pc, #236]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80038ea:	2180      	movs	r1, #128	; 0x80
 80038ec:	0049      	lsls	r1, r1, #1
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038f2:	f7fd fca1 	bl	8001238 <HAL_GetTick>
 80038f6:	0003      	movs	r3, r0
 80038f8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038fa:	e00b      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fc:	f7fd fc9c 	bl	8001238 <HAL_GetTick>
 8003900:	0002      	movs	r2, r0
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d904      	bls.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800390a:	2313      	movs	r3, #19
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	2203      	movs	r2, #3
 8003910:	701a      	strb	r2, [r3, #0]
        break;
 8003912:	e005      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003914:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	2380      	movs	r3, #128	; 0x80
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4013      	ands	r3, r2
 800391e:	d0ed      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003920:	2313      	movs	r3, #19
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d15e      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800392a:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800392c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800392e:	23c0      	movs	r3, #192	; 0xc0
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4013      	ands	r3, r2
 8003934:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d019      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	429a      	cmp	r2, r3
 8003944:	d014      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003946:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394a:	4a24      	ldr	r2, [pc, #144]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800394c:	4013      	ands	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003950:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003952:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003954:	4b1f      	ldr	r3, [pc, #124]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003956:	2180      	movs	r1, #128	; 0x80
 8003958:	0249      	lsls	r1, r1, #9
 800395a:	430a      	orrs	r2, r1
 800395c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800395e:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003960:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003962:	4b1c      	ldr	r3, [pc, #112]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003964:	491e      	ldr	r1, [pc, #120]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003966:	400a      	ands	r2, r1
 8003968:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800396a:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2201      	movs	r2, #1
 8003974:	4013      	ands	r3, r2
 8003976:	d016      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fd fc5e 	bl	8001238 <HAL_GetTick>
 800397c:	0003      	movs	r3, r0
 800397e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003980:	e00c      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003982:	f7fd fc59 	bl	8001238 <HAL_GetTick>
 8003986:	0002      	movs	r2, r0
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	4a15      	ldr	r2, [pc, #84]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d904      	bls.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003992:	2313      	movs	r3, #19
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	2203      	movs	r2, #3
 8003998:	701a      	strb	r2, [r3, #0]
            break;
 800399a:	e004      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	2202      	movs	r2, #2
 80039a2:	4013      	ands	r3, r2
 80039a4:	d0ed      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80039a6:	2313      	movs	r3, #19
 80039a8:	18fb      	adds	r3, r7, r3
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039b0:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	4a09      	ldr	r2, [pc, #36]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	0019      	movs	r1, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039c0:	430a      	orrs	r2, r1
 80039c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80039c4:	e016      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039c6:	2312      	movs	r3, #18
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	2213      	movs	r2, #19
 80039cc:	18ba      	adds	r2, r7, r2
 80039ce:	7812      	ldrb	r2, [r2, #0]
 80039d0:	701a      	strb	r2, [r3, #0]
 80039d2:	e00f      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40007000 	.word	0x40007000
 80039dc:	fffffcff 	.word	0xfffffcff
 80039e0:	fffeffff 	.word	0xfffeffff
 80039e4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e8:	2312      	movs	r3, #18
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	2213      	movs	r2, #19
 80039ee:	18ba      	adds	r2, r7, r2
 80039f0:	7812      	ldrb	r2, [r2, #0]
 80039f2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039f4:	2311      	movs	r3, #17
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d105      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fe:	4bb6      	ldr	r3, [pc, #728]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a02:	4bb5      	ldr	r3, [pc, #724]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a04:	49b5      	ldr	r1, [pc, #724]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003a06:	400a      	ands	r2, r1
 8003a08:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	4013      	ands	r3, r2
 8003a12:	d009      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a14:	4bb0      	ldr	r3, [pc, #704]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	2203      	movs	r2, #3
 8003a1a:	4393      	bics	r3, r2
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	4bad      	ldr	r3, [pc, #692]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a24:	430a      	orrs	r2, r1
 8003a26:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d009      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a32:	4ba9      	ldr	r3, [pc, #676]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a36:	220c      	movs	r2, #12
 8003a38:	4393      	bics	r3, r2
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	4ba5      	ldr	r3, [pc, #660]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a42:	430a      	orrs	r2, r1
 8003a44:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a50:	4ba1      	ldr	r3, [pc, #644]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a54:	2230      	movs	r2, #48	; 0x30
 8003a56:	4393      	bics	r3, r2
 8003a58:	0019      	movs	r1, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	4b9e      	ldr	r3, [pc, #632]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a60:	430a      	orrs	r2, r1
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2210      	movs	r2, #16
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d009      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a6e:	4b9a      	ldr	r3, [pc, #616]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	4a9b      	ldr	r2, [pc, #620]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	0019      	movs	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	4b96      	ldr	r3, [pc, #600]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	015b      	lsls	r3, r3, #5
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d009      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003a8e:	4b92      	ldr	r3, [pc, #584]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a92:	4a94      	ldr	r2, [pc, #592]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	0019      	movs	r1, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	695a      	ldr	r2, [r3, #20]
 8003a9c:	4b8e      	ldr	r3, [pc, #568]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d009      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aae:	4b8a      	ldr	r3, [pc, #552]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	4a8d      	ldr	r2, [pc, #564]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003abc:	4b86      	ldr	r3, [pc, #536]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	2380      	movs	r3, #128	; 0x80
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4013      	ands	r3, r2
 8003acc:	d009      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ace:	4b82      	ldr	r3, [pc, #520]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad2:	4a86      	ldr	r2, [pc, #536]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	0019      	movs	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003adc:	4b7e      	ldr	r3, [pc, #504]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d009      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aec:	4b7a      	ldr	r3, [pc, #488]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af0:	4a7f      	ldr	r2, [pc, #508]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	0019      	movs	r1, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	4b77      	ldr	r3, [pc, #476]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003afc:	430a      	orrs	r2, r1
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2240      	movs	r2, #64	; 0x40
 8003b06:	4013      	ands	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b0a:	4b73      	ldr	r3, [pc, #460]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	4a79      	ldr	r2, [pc, #484]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	0019      	movs	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	4b6f      	ldr	r3, [pc, #444]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	01db      	lsls	r3, r3, #7
 8003b26:	4013      	ands	r3, r2
 8003b28:	d015      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b2a:	4b6b      	ldr	r3, [pc, #428]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	0899      	lsrs	r1, r3, #2
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b36:	4b68      	ldr	r3, [pc, #416]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	05db      	lsls	r3, r3, #23
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d106      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b48:	4b63      	ldr	r3, [pc, #396]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	4b62      	ldr	r3, [pc, #392]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b4e:	2180      	movs	r1, #128	; 0x80
 8003b50:	0249      	lsls	r1, r1, #9
 8003b52:	430a      	orrs	r2, r1
 8003b54:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	031b      	lsls	r3, r3, #12
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d009      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b62:	4b5d      	ldr	r3, [pc, #372]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	2240      	movs	r2, #64	; 0x40
 8003b68:	4393      	bics	r3, r2
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b70:	4b59      	ldr	r3, [pc, #356]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b72:	430a      	orrs	r2, r1
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	2380      	movs	r3, #128	; 0x80
 8003b7c:	039b      	lsls	r3, r3, #14
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d016      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b82:	4b55      	ldr	r3, [pc, #340]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	4a5c      	ldr	r2, [pc, #368]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	0019      	movs	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b90:	4b51      	ldr	r3, [pc, #324]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b92:	430a      	orrs	r2, r1
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	03db      	lsls	r3, r3, #15
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d106      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003ba2:	4b4d      	ldr	r3, [pc, #308]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	4b4c      	ldr	r3, [pc, #304]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ba8:	2180      	movs	r1, #128	; 0x80
 8003baa:	0449      	lsls	r1, r1, #17
 8003bac:	430a      	orrs	r2, r1
 8003bae:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	03db      	lsls	r3, r3, #15
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d016      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003bbc:	4b46      	ldr	r3, [pc, #280]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc0:	4a4e      	ldr	r2, [pc, #312]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	0019      	movs	r1, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bca:	4b43      	ldr	r3, [pc, #268]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bd4:	2380      	movs	r3, #128	; 0x80
 8003bd6:	045b      	lsls	r3, r3, #17
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d106      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003bdc:	4b3e      	ldr	r3, [pc, #248]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	4b3d      	ldr	r3, [pc, #244]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003be2:	2180      	movs	r1, #128	; 0x80
 8003be4:	0449      	lsls	r1, r1, #17
 8003be6:	430a      	orrs	r2, r1
 8003be8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	2380      	movs	r3, #128	; 0x80
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d014      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003bf6:	4b38      	ldr	r3, [pc, #224]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	4393      	bics	r3, r2
 8003bfe:	0019      	movs	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1a      	ldr	r2, [r3, #32]
 8003c04:	4b34      	ldr	r3, [pc, #208]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c06:	430a      	orrs	r2, r1
 8003c08:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d106      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c12:	4b31      	ldr	r3, [pc, #196]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	4b30      	ldr	r3, [pc, #192]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c18:	2180      	movs	r1, #128	; 0x80
 8003c1a:	0249      	lsls	r1, r1, #9
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	019b      	lsls	r3, r3, #6
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d014      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003c2c:	4b2a      	ldr	r3, [pc, #168]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c30:	220c      	movs	r2, #12
 8003c32:	4393      	bics	r3, r2
 8003c34:	0019      	movs	r1, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c3a:	4b27      	ldr	r3, [pc, #156]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d106      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c48:	4b23      	ldr	r3, [pc, #140]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	4b22      	ldr	r3, [pc, #136]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c4e:	2180      	movs	r1, #128	; 0x80
 8003c50:	0249      	lsls	r1, r1, #9
 8003c52:	430a      	orrs	r2, r1
 8003c54:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	045b      	lsls	r3, r3, #17
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d016      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c62:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c66:	4a22      	ldr	r2, [pc, #136]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	0019      	movs	r1, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c70:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c72:	430a      	orrs	r2, r1
 8003c74:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	019b      	lsls	r3, r3, #6
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d106      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c82:	4b15      	ldr	r3, [pc, #84]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c88:	2180      	movs	r1, #128	; 0x80
 8003c8a:	0449      	lsls	r1, r1, #17
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	2380      	movs	r3, #128	; 0x80
 8003c96:	049b      	lsls	r3, r3, #18
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d016      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c9c:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca0:	4a10      	ldr	r2, [pc, #64]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	0019      	movs	r1, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003caa:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cac:	430a      	orrs	r2, r1
 8003cae:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d106      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cc2:	2180      	movs	r1, #128	; 0x80
 8003cc4:	0449      	lsls	r1, r1, #17
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003cca:	2312      	movs	r3, #18
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	781b      	ldrb	r3, [r3, #0]
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b006      	add	sp, #24
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	efffffff 	.word	0xefffffff
 8003ce0:	fffff3ff 	.word	0xfffff3ff
 8003ce4:	fffffcff 	.word	0xfffffcff
 8003ce8:	fff3ffff 	.word	0xfff3ffff
 8003cec:	ffcfffff 	.word	0xffcfffff
 8003cf0:	ffffcfff 	.word	0xffffcfff
 8003cf4:	ffff3fff 	.word	0xffff3fff
 8003cf8:	ffbfffff 	.word	0xffbfffff
 8003cfc:	feffffff 	.word	0xfeffffff

08003d00 <__libc_init_array>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	2600      	movs	r6, #0
 8003d04:	4d0c      	ldr	r5, [pc, #48]	; (8003d38 <__libc_init_array+0x38>)
 8003d06:	4c0d      	ldr	r4, [pc, #52]	; (8003d3c <__libc_init_array+0x3c>)
 8003d08:	1b64      	subs	r4, r4, r5
 8003d0a:	10a4      	asrs	r4, r4, #2
 8003d0c:	42a6      	cmp	r6, r4
 8003d0e:	d109      	bne.n	8003d24 <__libc_init_array+0x24>
 8003d10:	2600      	movs	r6, #0
 8003d12:	f000 f821 	bl	8003d58 <_init>
 8003d16:	4d0a      	ldr	r5, [pc, #40]	; (8003d40 <__libc_init_array+0x40>)
 8003d18:	4c0a      	ldr	r4, [pc, #40]	; (8003d44 <__libc_init_array+0x44>)
 8003d1a:	1b64      	subs	r4, r4, r5
 8003d1c:	10a4      	asrs	r4, r4, #2
 8003d1e:	42a6      	cmp	r6, r4
 8003d20:	d105      	bne.n	8003d2e <__libc_init_array+0x2e>
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
 8003d24:	00b3      	lsls	r3, r6, #2
 8003d26:	58eb      	ldr	r3, [r5, r3]
 8003d28:	4798      	blx	r3
 8003d2a:	3601      	adds	r6, #1
 8003d2c:	e7ee      	b.n	8003d0c <__libc_init_array+0xc>
 8003d2e:	00b3      	lsls	r3, r6, #2
 8003d30:	58eb      	ldr	r3, [r5, r3]
 8003d32:	4798      	blx	r3
 8003d34:	3601      	adds	r6, #1
 8003d36:	e7f2      	b.n	8003d1e <__libc_init_array+0x1e>
 8003d38:	08003df0 	.word	0x08003df0
 8003d3c:	08003df0 	.word	0x08003df0
 8003d40:	08003df0 	.word	0x08003df0
 8003d44:	08003df4 	.word	0x08003df4

08003d48 <memset>:
 8003d48:	0003      	movs	r3, r0
 8003d4a:	1882      	adds	r2, r0, r2
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d100      	bne.n	8003d52 <memset+0xa>
 8003d50:	4770      	bx	lr
 8003d52:	7019      	strb	r1, [r3, #0]
 8003d54:	3301      	adds	r3, #1
 8003d56:	e7f9      	b.n	8003d4c <memset+0x4>

08003d58 <_init>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5e:	bc08      	pop	{r3}
 8003d60:	469e      	mov	lr, r3
 8003d62:	4770      	bx	lr

08003d64 <_fini>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr
